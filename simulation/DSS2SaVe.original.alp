<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.7.12.202205250359" AlpVersion="8.7.5">
<Model>
	<Id>1620825773707</Id>
	<Name><![CDATA[DSS2SaVe]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[dss2save]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Hour]]></ModelTimeUnit>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1620825773714</Id>
			<Name><![CDATA[Main]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;
import java.io.IOException;
import java.net.*;
import ai.h2o.mojos.runtime.MojoPipeline;
import ai.h2o.mojos.runtime.api.MojoPipelineService;
import ai.h2o.mojos.runtime.frame.MojoFrame;
import ai.h2o.mojos.runtime.frame.MojoFrameBuilder;
import ai.h2o.mojos.runtime.frame.MojoRowBuilder;


import hex.genmodel.easy.RowData;
import hex.genmodel.easy.EasyPredictModelWrapper;
import hex.genmodel.easy.prediction.*;
import hex.genmodel.MojoModel;

import java.io.File;
import org.apache.commons.lang3.ArrayUtils;
 import java.util.Arrays;

import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;

import java.util.HashMap;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.json.simple.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonProperty; 
import dss2save.Distribution;
import dss2save.Duration;
import dss2save.FitnessDistribution;
import dss2save.GeoPoint;
import dss2save.GeoPolygon;
import dss2save.OperatingSite;
import dss2save.Population;
import dss2save.RequiredVolunteers;
import dss2save.Scenario;
import dss2save.ScenarioEvent;

import dss2save.NestList;]]></Import>
			<StartupCode><![CDATA[initSimulation();
traceln(System.getenv("PATH"));
pyCommunicator.run("from predictor import SVPredictor", 
					"predictor = SVPredictor()");

]]></StartupCode>
			<DestroyCode><![CDATA[databaseConnection.closeConnection();
]]></DestroyCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1620825773712</Id>
				<Name><![CDATA[1620825773712]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[5]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[KPH]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>GIS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1620892800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1620825773710</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1620825773713</CurrentLevel>
			<ConnectionsId>1620825773709</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1632230384763</Id>
					<Name><![CDATA[scenario]]></Name>
					<X>710</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Scenario]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632431306702</Id>
					<Name><![CDATA[databaseConnection]]></Name>
					<X>520</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[DatabaseConnection]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[new DatabaseConnection()]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632562359449</Id>
					<Name><![CDATA[loggingInterval]]></Name>
					<X>520</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[15]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1634725172215</Id>
					<Name><![CDATA[predictionModel]]></Name>
					<X>520</X><Y>-40</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[MojoPipeline]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[//loadModel("pipeline.mojo")]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1641396871151</Id>
					<Name><![CDATA[predictionThreshold]]></Name>
					<X>710</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0.5]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1641397986605</Id>
					<Name><![CDATA[adaptDynamicSpeed]]></Name>
					<X>710</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1657449115052</Id>
					<Name><![CDATA[debugRandomMode]]></Name>
					<X>710</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1657464824499</Id>
					<Name><![CDATA[onSitePolicy]]></Name>
					<X>520</X><Y>-140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA["REQUIRED"]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1657627976218</Id>
					<Name><![CDATA[experimentID]]></Name>
					<X>860</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1631614004903</Id>
					<Name><![CDATA[precipitation]]></Name>
					<X>1000</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1631614004901</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631614025768</Id>
					<Name><![CDATA[temperature]]></Name>
					<X>1000</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1631614025766</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1636716746069</Id>
					<Name><![CDATA[initScenario]]></Name>
					<X>260</X><Y>800</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[""]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1636716746067</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<Events>
				<Event>
					<Id>1632478485001</Id>
					<Name><![CDATA[event]]></Name>
					<X>100</X><Y>650</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1630396800000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[loggingInterval]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[long currTime = date().getTime();
String volunteers = "";
String operatingSites = "";

for (VolunteerAgent s : volunteerAgents) {
if(volunteerAgents.size() == 0){
break;
}
String OSname = "none";

if(s.operatingSite != null){
OSname = s.operatingSite.name;
}



volunteers +="(";
volunteers += currTime+ ","+ experimentID + "," + s.getId()+ ","+ s.networkSize+ ","+  s.fitness+ ","+ s.daysWorked+ ","+ s.totalHoursHelped+ ","+ s.rejects+ ", ST_MakePoint("+ s.homeLocation.getLongitude()+ ", "+ s.homeLocation.getLatitude()+ "),"+s.isGoingHome+", ST_MakePoint("+ s.getLongitude()+ ", "+ s.getLatitude()+"),'"+  OSname + "'";

//databaseConnection.insertSpontaneousVolunteer(currTime, s.getId(), s.sex, s.age, s.empathy, s.fitness, s.networkSize, s.daysWorked, s.totalHoursHelped, s.rejects, s.homeLocation.getLatitude(), s.homeLocation.getLongitude(), s.getLatitude(), s.getLongitude(), s.isGoingHome, s.operatingSite.name);
volunteers +="),";
}




for (OperatingSiteAgent s : operatingSiteAgents) {
if(operatingSiteAgents.size() == 0){
break;
}


operatingSites +="(";
operatingSites +=currTime+ ","+ experimentID + "," +"'"+ s.name+"',"+ precipitation+ ","+ temperature+", ST_MakePoint("+ s.getLongitude()+ ", "+ s.getLatitude()+")," + s.impact+ ","+ s.media+ ","+ s.risk+ ","+ s.information+ ","+ s.num_requiredVolunteers_admin+ ","+ s.num_requiredVolunteers_easy+ ","+ s.num_requiredVolunteers_medium+ ","+ s.num_requiredVolunteers_heavy+ ","+ s.num_currentVolunteers_admin+ ","+ s.num_currentVolunteers_easy+ ","+ s.num_currentVolunteers_medium+ ","+ s.num_currentVolunteers_heavy+ ","+ s.num_currentRejects;
operatingSites +="),";
s.num_currentRejects = 0;
}



if(volunteers.length() > 0){
   databaseConnection.insertSpontaneousVolunteer(volunteers.substring(0, volunteers.length() - 1));

}

if(operatingSites.length() > 0){
   databaseConnection.insertOperatingSite(operatingSites.substring(0, operatingSites.length() - 1));

}]]></Action>
				</Event>
			</Events>
			<DynamicEvents>
				<DynamicEventClass>
					<Id>1632424391961</Id>
					<Name><![CDATA[NewEvent]]></Name>
					<X>150</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[evt_precipitation]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[evt_temperature]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[evt_operating_sites]]></Name>
						<Type><![CDATA[List<OperatingSite> ]]></Type>
					</Parameter>
					<Action><![CDATA[precipitation = evt_precipitation;
temperature = evt_temperature;

/*
for(int i = 0; i < operatingSiteAgents.size(); i++){
remove_operatingSiteAgents(operatingSiteAgents.get(i));
}
*/



for(OperatingSite os_event : evt_operating_sites){
boolean exists = false;
for(int i = 0; i < operatingSiteAgents.size(); i++){
if(operatingSiteAgents.get(i).name == os_event.getName()){


operatingSiteAgents.get(i).impact = os_event.getImpact();
operatingSiteAgents.get(i).media = os_event.getMediaCoverage();
operatingSiteAgents.get(i).information = os_event.getInformation();
operatingSiteAgents.get(i).risk = os_event.getRisk();


operatingSiteAgents.get(i).num_requiredVolunteers_admin =os_event.getRequiredVolunteers().getAdmin();
operatingSiteAgents.get(i).num_requiredVolunteers_easy =os_event.getRequiredVolunteers().getEasy();
operatingSiteAgents.get(i).num_requiredVolunteers_medium =os_event.getRequiredVolunteers().getMedium();
operatingSiteAgents.get(i).num_requiredVolunteers_heavy =os_event.getRequiredVolunteers().getHeavy();
exists = true;
break;


}
}

if(exists == true){
continue;
}

System.out.println(os_event.getName());
add_operatingSiteAgents();
OperatingSiteAgent os = operatingSiteAgents.get(operatingSiteAgents.size()-1);
os.impact = os_event.getImpact();
os.media = os_event.getMediaCoverage();
os.information = os_event.getInformation();
os.risk = os_event.getRisk();
os.name = os_event.getName();


os.num_requiredVolunteers_admin =os_event.getRequiredVolunteers().getAdmin();
os.num_requiredVolunteers_easy =os_event.getRequiredVolunteers().getEasy();
os.num_requiredVolunteers_medium =os_event.getRequiredVolunteers().getMedium();
os.num_requiredVolunteers_heavy =os_event.getRequiredVolunteers().getHeavy();



Point location = new Point(os_event.getLocation().getCoordinates().get(1),os_event.getLocation().getCoordinates().get(0));

os.setLocation(location);
}


/*
for(int operatingSites = 0; operatingSites < evt_operating_sites.size(); operatingSites++){








}




*/

]]></Action>
				</DynamicEventClass>
			</DynamicEvents>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1631883494658</Id>
					<Name><![CDATA[finishedExperiment]]></Name>
					<X>100</X><Y>740</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[try {

Map<String, String> elements = new HashMap();
        elements.put("data", "");

ObjectMapper objectMapper = new ObjectMapper();
String requestBody = objectMapper
      .writerWithDefaultPrettyPrinter()
      .writeValueAsString(elements);

HttpClient client = HttpClient.newHttpClient();
HttpRequest request = HttpRequest.newBuilder()
.uri(URI.create("http://localhost/result"))
  .header("Content-Type", "application/json")
      .POST(BodyPublishers.ofString(requestBody))
.build();


        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());
        if (response.statusCode()==200) {
            System.out.println(response.body());
        }




    } catch (IOException |  InterruptedException e) {
        e.printStackTrace();
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1632562757862</Id>
					<Name><![CDATA[initSimulation]]></Name>
					<X>100</X><Y>700</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[
try{

//DatabaseConnection connection = new DatabaseConnection();

ObjectMapper om = new ObjectMapper();
Scenario scenario = new Scenario();
String userDirectory = new File("").getAbsolutePath();
System.out.println("SIMULATION SCENARIO" + initScenario);

//scenario = om.readValue(new File(userDirectory + "/scenarioJSON.json"), Scenario.class);
scenario = om.readValue(new File(initScenario), Scenario.class);

long currTime = date().getTime();
experimentID =  databaseConnection.createNewExperiment("," +currTime + ", '" + scenario.getTitle() + "', '" + scenario.getDescription()+ "')");

traceln("EXPERIMENT ID IST : " + experimentID);
//scenario = om.readValue(initScenario, Scenario.class);
traceln(scenario.getDuration().getStartDate());

//Wenn kein CUstom Experiment, dann getExperiment unkommentieren.
//getExperiment().getEngine().setStartDate(scenario.getDuration().getStartDate());
//getExperiment().getEngine().setStopDate(scenario.getDuration().getEndDate());
getEngine().setStartDate(scenario.getDuration().getStartDate());
getEngine().setStopDate(scenario.getDuration().getEndDate());

traceln(scenario.getDuration().getEndDate().toString());

 for (Population population : scenario.getPopulations()) {
 
 double[] fitnessValues = {1,2,3,4};
 double[] fitnessProbability = {(double)population.getFitnessDistribution().getAdmin(),(double) population.getFitnessDistribution().getEasy(),(double)population.getFitnessDistribution().getMedium(),(double)population.getFitnessDistribution().getHeavy()} ;
  CustomDistribution fitnessDistribution= new CustomDistribution(fitnessValues,fitnessProbability,CUSTOM_DISTRIBUTION_INTERPOLATION_NONE, getEngine().getDefaultRandomGenerator());

 
double[] pointsForPopulation= returnGeoArray(population.getRegion());
    GISRegion populationArea = new GISRegion(map, pointsForPopulation);




    for(int volunteers = 0; volunteers < population.getNumber(); volunteers++) {
 
 
 add_volunteerAgents();
    VolunteerAgent sv = volunteerAgents.get(volunteerAgents.size()-1);
    sv.rejectTolerance = (int)triangular(population.getAcceptableRejectsDayDistribution().getMin(), population.getAcceptableRejectsDayDistribution().getMax(),population.getAcceptableRejectsDayDistribution().getMod());
    sv.rejectToleranceGeneral = (int)triangular(population.getAcceptableRejectsGeneralDistribution().getMin(), population.getAcceptableRejectsGeneralDistribution().getMax(),population.getAcceptableRejectsGeneralDistribution().getMod());
    sv.restingTime = (int)triangular(population.getRestingDurationDistribution().getMin(), population.getRestingDurationDistribution().getMax(),population.getRestingDurationDistribution().getMod());

   
    sv.workingTime = (int)triangular(population.getHelpTimeDistribution().getMin(), population.getHelpTimeDistribution().getMax(),population.getHelpTimeDistribution().getMod());
    sv.workingDuration = (int)triangular(population.getHelpDurationDistribution().getMin(), population.getHelpDurationDistribution().getMax(),population.getHelpDurationDistribution().getMod());
    sv.networkSize = (int)triangular(population.getFriendsDistribution().getMin(), population.getFriendsDistribution().getMax(),population.getFriendsDistribution().getMod());
    sv.fitness =fitnessDistribution.getInt();
    Point homeLocation = new Point();
    sv.homeLocation = populationArea.randomPointInside();
    sv.setLocation(sv.homeLocation);
 
 
} 
 }
   precipitation = (int)scenario.getEvents().get(0).getPrecipitation();
    temperature = (int)scenario.getEvents().get(0).getTemperature();
for (ScenarioEvent event : scenario.getEvents()) {
    long timeout_event = event.getDatetime().getTime()- scenario.getDuration().getStartDate().getTime();
    
     timeout_event = (timeout_event / 1000) / 60;
     System.out.println(timeout_event);
    create_NewEvent(timeout_event, MINUTE, event.getPrecipitation(), event.getTemperature(), event.getOperatingSites());
    
   
    }



}catch(Exception e){
e.printStackTrace();
}

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double[]]]></ReturnType>
					<Id>1633942568214</Id>
					<Name><![CDATA[returnGeoArray]]></Name>
					<X>100</X><Y>780</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[geopolygon]]></Name>
						<Type><![CDATA[GeoPolygon]]></Type>
					</Parameter>
					<Body><![CDATA[
NestList nested = new NestList();

  List<Object> nestedList = nested.lst(geopolygon.getCoordinates());
        List<Double> flatList = nested.flatten(nestedList);

        double[] pointsForPopulation =  ArrayUtils.toPrimitive(flatList.toArray(new Double[flatList.size()]));
            ArrayUtils.reverse(pointsForPopulation);
        
return  pointsForPopulation;


]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1620825773709</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>1630325953090</Id>
					<Name><![CDATA[operatingSiteAgents]]></Name>
					<X>390</X><Y>-80</Y>
					<Label><X>-65</X><Y>-25</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1630325954497</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[OperatingSiteAgent]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[dss2save]]></PackageName>
							<ClassName><![CDATA[OperatingSiteAgent]]></ClassName>
							<ItemName><![CDATA[1620825994345]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[num_operatingSiteID]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[impact]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[0]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[media]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[1]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[risk]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[2]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[information]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[1]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[name]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[num_requiredVolunteers_admin]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[num_requiredVolunteers_easy]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[num_requiredVolunteers_medium]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[num_requiredVolunteers_heavy]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[4]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialSpeedCode Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
					</InitialSpeedCode>
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>1632422178952</Id>
					<Name><![CDATA[volunteerAgents]]></Name>
					<X>140</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1632422178953</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[VolunteerAgent]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[dss2save]]></PackageName>
							<ClassName><![CDATA[VolunteerAgent]]></ClassName>
							<ItemName><![CDATA[1620825959702]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[homeLocation]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[rejectTolerance]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[workingTime]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[workingDuration]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[networkSize]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[fitness]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[rejectToleranceGeneral]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[restingTime]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[travelSpeed]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[1]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>1641225035640</Id>
					<Name><![CDATA[pyCommunicator]]></Name>
					<X>390</X><Y>640</Y>
					<Label><X>-35</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1657388944457</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[com.anylogic.libraries.pypeline]]></PackageName>
						<ClassName><![CDATA[PyCommunicator]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[com.anylogic.libraries.pypeline]]></PackageName>
							<ClassName><![CDATA[PyCommunicator]]></ClassName>
							<ItemName><![CDATA[1569858524853]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[enable]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[loadLastWorkingConfig]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[pythonCommandType]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[self.PYTHON_PATH]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[pythonCommand]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA["python"]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[pythonExecPath]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA["/Users/sebastianlindner/.pyenv/versions/3.10.1/bin"]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[throwErrorOnFailedAttempt]]></Name>
						</Parameter>
						<Parameter>
							<Name><![CDATA[redirectPyOutput]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>false</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[100]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>SPECIFIED_NUMBER</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Presentation>
				<Level>
					<Id>1620825773713</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<GISMap>
					<Id>1620827084959</Id>
					<Name><![CDATA[map]]></Name>
					<X>90</X><Y>40</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>910</Width>
					<Height>560</Height>
					<GISShapes>
					</GISShapes>
					<Latitude>51.484529934617136</Latitude>
					<Longitude>11.916615183741058</Longitude>
					<Scale>150000</Scale>
					<BorderColor>-4144960</BorderColor>
					<FillColor>-1</FillColor>
					<ShowTiles>false</ShowTiles>
					<TileURLProvider>ANYLOGIC</TileURLProvider>
					<CustomTileURL>false</CustomTileURL>
					<TileURL><![CDATA[https://a.tile.openstreetmap.org/[zoom]/[x]/[y].png]]></TileURL>				
					<RouteProviderType>STRAIGHT</RouteProviderType>
					<RouteNotFound>CREATE_STRAIGHT_LINE</RouteNotFound>
					<OnlineRouteProvider>ANYLOGIC</OnlineRouteProvider>
					<TransportType>CAR</TransportType>
					<RoutingMethod>SHORTEST</RoutingMethod>
					<PathfindingAlgorithm>ASTARBI</PathfindingAlgorithm>
					<CustomRouteProvider>false</CustomRouteProvider>
					<CustomRouteProviderCode><![CDATA[//Agent moves along a straight line
(startLat, startLon, endLat, endLon) -> {
	Curve<GISMarkupSegment> curve = new Curve<>();
	GISMarkupSegment segment = new GISMarkupSegmentLine(startLat, startLon, endLat, endLon);
	curve.addSegment(segment);
	curve.initialize();
	return curve;
}]]></CustomRouteProviderCode>
					<RouteSourceResourceReference>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[sachsen-anhalt-latest.osm.pbf]]></ClassName>
					</RouteSourceResourceReference>
					<RouteGraphResourceReference>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[Routing Path]]></ClassName>
					</RouteGraphResourceReference>	
					<MapScaleBasedGeneralization>true</MapScaleBasedGeneralization>
					<AbsolutePrecisionGeneralization>1000</AbsolutePrecisionGeneralization>


				</GISMap>
				<EmbeddedObjectPresentation>
					<Id>1630325954497</Id>
					<Name><![CDATA[operatingSiteAgents_presentation]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>AGENT_CURRENT_POSITION</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>51.484529934617136</Latitude>
					<Longitude>11.916615183741058</Longitude>
				</EmbeddedObjectPresentation>
				<Text>
					<Id>1631095166985</Id>
					<Name><![CDATA[text]]></Name>
					<X>370</X><Y>-30</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>22</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<EmbeddedObjectPresentation>
					<Id>1657388944457</Id>
					<Name><![CDATA[pyCommunicator_presentation]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>AGENT_CURRENT_POSITION</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>51.484529934617136</Latitude>
					<Longitude>11.916615183741058</Longitude>
				</EmbeddedObjectPresentation>
			</Presentation>

				</Level>
				<EmbeddedObjectPresentation>
					<Id>1632422178953</Id>
					<Name><![CDATA[volunteerAgents_presentation]]></Name>
					<X>240</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>AGENT_CURRENT_POSITION</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>51.484529934617136</Latitude>
					<Longitude>11.916615183741058</Longitude>
				</EmbeddedObjectPresentation>
			</Presentation>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1620825959704</Id>
			<Name><![CDATA[VolunteerAgent]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import org.reflections.vfs.SystemDir;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;
import java.util.*;  ]]></Import>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1620825959702</Id>
				<Name><![CDATA[1620825959702]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[5]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[KPH]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1620892800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1620825959700</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1620825959703</CurrentLevel>
			<ConnectionsId>1620825959699</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1631612802423</Id>
					<Name><![CDATA[rejects]]></Name>
					<X>440</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631613438458</Id>
					<Name><![CDATA[daysWorked]]></Name>
					<X>440</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631698578892</Id>
					<Name><![CDATA[notMotivated]]></Name>
					<X>440</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631698618365</Id>
					<Name><![CDATA[isGoingHome]]></Name>
					<X>440</X><Y>-130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631700796410</Id>
					<Name><![CDATA[isHelping]]></Name>
					<X>440</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631870033431</Id>
					<Name><![CDATA[isFriendHelping]]></Name>
					<X>440</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1631870298770</Id>
					<Name><![CDATA[friendOperatingSite]]></Name>
					<X>440</X><Y>-190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[OperatingSiteAgent]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632408287362</Id>
					<Name><![CDATA[operatingSite]]></Name>
					<X>440</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[OperatingSiteAgent]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632477729880</Id>
					<Name><![CDATA[totalHoursHelped]]></Name>
					<X>600</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632479501184</Id>
					<Name><![CDATA[taskSelector]]></Name>
					<X>600</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[100]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1633944970569</Id>
					<Name><![CDATA[totalRejects]]></Name>
					<X>446</X><Y>8</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1657449336264</Id>
					<Name><![CDATA[rejectedBefore]]></Name>
					<X>600</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[false]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1657454631819</Id>
					<Name><![CDATA[dayTime]]></Name>
					<X>600</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1658917806731</Id>
					<Name><![CDATA[rejectedOS]]></Name>
					<X>600</X><Y>-30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[OperatingSiteAgent]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1630401607313</Id>
					<Name><![CDATA[homeLocation]]></Name>
					<X>440</X><Y>-20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[Point]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1630401607311</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631612589947</Id>
					<Name><![CDATA[rejectTolerance]]></Name>
					<X>280</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[3]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631612589945</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631613383090</Id>
					<Name><![CDATA[workingTime]]></Name>
					<X>280</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[6]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631613383088</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631613397327</Id>
					<Name><![CDATA[workingDuration]]></Name>
					<X>280</X><Y>-110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[12]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631613397325</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631789797308</Id>
					<Name><![CDATA[networkSize]]></Name>
					<X>280</X><Y>-10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1631789797306</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631789828355</Id>
					<Name><![CDATA[fitness]]></Name>
					<X>280</X><Y>10</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1631789828353</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1633944902823</Id>
					<Name><![CDATA[rejectToleranceGeneral]]></Name>
					<X>280</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[100]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1633944902821</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1633945165863</Id>
					<Name><![CDATA[restingTime]]></Name>
					<X>280</X><Y>-170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[(int)triangular(6, 20, 12)]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1633945165861</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1641390685051</Id>
					<Name><![CDATA[travelSpeed]]></Name>
					<X>280</X><Y>-140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[7]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1641390685049</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630324022347</Id>
					<Name><![CDATA[HOME]]></Name>
					<X>200</X><Y>90</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[rejects = 0;


]]></EntryAction>
						<FillColor>-16711681</FillColor>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630324313827</Id>
					<Name><![CDATA[DECIDING]]></Name>
					<X>200</X><Y>200</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="100">
						<EntryAction><![CDATA[if (main.debugRandomMode) {
    if (randomTrue(0.5)) {
        operatingSite = randomWhere(main.operatingSiteAgents, m -> m.risk > -1);
    } else {
        operatingSite = null;
    }

} else {
    /*
    ArrayList < OSScore > scoreList = new ArrayList < OSScore > ();
    for (int i = 0; i < main.operatingSiteAgents.size(); i++) {
        double value = calculatePrediction(main.operatingSiteAgents(i));
      
            
           // System.out.println("PREDICTION = " + value);
        if (value >= main.predictionThreshold) {
            OSScore newScore = new OSScore(value, main.operatingSiteAgents(i));
            scoreList.add(newScore);
        }
    }
    
    if (scoreList.size() > 0) {    
        operatingSite = scoreList.stream()
                            .min(Comparator.comparingDouble(OSScore::getScore))
                            .get().getOperatingSite();
    } else {
        operatingSite = null;
    }
    */
//List<Double> average = new ArrayList<Double>();

    Map < Double, OperatingSiteAgent > map = new HashMap < > ();
    for (int i = 0; i < main.operatingSiteAgents.size(); i++) {
        if (main.operatingSiteAgents(i) != rejectedOS) {
        
        if(main.adaptDynamicSpeed){
setTravelingSpeed(main.operatingSiteAgents(i));
}
 
            double value = calculatePrediction(main.operatingSiteAgents(i));
          // System.out.println("bef PREDICTION = " + value);
//average.add(value);
      //     System.out.println("PREDICTION = " + value);
            if (value >= main.predictionThreshold || randomTrue(0.05) ) {
                map.put(value, main.operatingSiteAgents(i));
            }

        }
    }
    if (map.size() > 0) {
        Map < Double, OperatingSiteAgent > sorted = new TreeMap < Double, OperatingSiteAgent > (Comparator.reverseOrder());
        sorted.putAll(map);

        //System.out.println(sorted.values().stream().findFirst().get().name);
        operatingSite = sorted.values().stream().findFirst().get();
    } else {
        operatingSite = null;
    }
    rejectedOS = null;

//main.predictionThreshold = average.stream().mapToDouble(d -> d).average().orElse(0.5);

}
]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630577001515</Id>
					<Name><![CDATA[MOVING]]></Name>
					<X>450</X><Y>270</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[isGoingHome = false;

moveTo(operatingSite);
]]></EntryAction>
						<FillColor>-16711936</FillColor>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630577072590</Id>
					<Name><![CDATA[MOVINGHOME]]></Name>
					<X>450</X><Y>90</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[
isGoingHome = true;



moveTo(homeLocation);



]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1630577082737</Id>
					<Name><![CDATA[HELPING]]></Name>
					<X>450</X><Y>180</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[isHelping =true;

operatingSite.updateVariable(true, taskSelector);



]]></EntryAction>
						<ExitAction><![CDATA[daysWorked++;
totalHoursHelped += workingTime;
isHelping =false;

operatingSite.updateVariable(false, taskSelector);

/*if(!operatingSiteHistory.contains(operatingSite)){
operatingSiteHistory.add(operatingSite);
}
*/

]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="Branch" ParentState="ROOT_NODE">
					<Id>1630577175511</Id>
					<Name><![CDATA[branch]]></Name>
					<X>370</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Properties>	
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Branch" ParentState="ROOT_NODE">
					<Id>1631094981162</Id>
					<Name><![CDATA[branch1]]></Name>
					<X>640</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Properties>	
						<Action><![CDATA[
 
]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1631612683839</Id>
					<Name><![CDATA[REJECTED]]></Name>
					<X>690</X><Y>180</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[rejects++;
operatingSite.num_currentRejects++;]]></EntryAction>
						<ExitAction><![CDATA[rejectedOS = operatingSite;]]></ExitAction>
						<FillColor>-3308225</FillColor>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="Branch" ParentState="ROOT_NODE">
					<Id>1631612839552</Id>
					<Name><![CDATA[branch2]]></Name>
					<X>740</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Properties>	
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1631613321902</Id>
					<Name><![CDATA[UNAVAILABLE]]></Name>
					<X>20</X><Y>90</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[oval.setFillColor(Color.RED);
notMotivated = true;]]></EntryAction>
						<FillColor>-65536</FillColor>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1641904917419</Id>
					<Name><![CDATA[DISASTER_STRIKES]]></Name>
					<X>40</X><Y>210</Y>
					<Label><X>0</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="120" Height="30">
						<FillColor>-4144960</FillColor>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1630324019160</Id>
					<Name><![CDATA[scenarioStart]]></Name>
					<X>100</X><Y>170</Y>
					<Label><X>10</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
					</Points>
					<Properties Target="1641904917419">
						<Action><![CDATA[for(int i = 0; friendConnections.getConnectionsNumber() <= networkSize; i++){
if(main.volunteerAgents.size() > 1){
connectTo(randomWhere( main.volunteerAgents, p -> p != this ));
}else{
break;
}
}

]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630324308627</Id>
					<Name><![CDATA[transition]]></Name>
					<X>220</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>80</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630324022347" Target="1630324313827" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[restingTime]]></Code>
							<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630401155774</Id>
					<Name><![CDATA[transition1]]></Name>
					<X>300</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>58</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630324313827" Target="1630577175511" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[triangular (2, 6, 8)]]></Code>
							<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630577101669</Id>
					<Name><![CDATA[transition2]]></Name>
					<X>450</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-150</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630577072590" Target="1630324022347" Trigger="arrival">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630577119828</Id>
					<Name><![CDATA[transition3]]></Name>
					<X>500</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-60</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630577082737" Target="1630577072590" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[(main.precipitation == 3 || main.temperature == 1) ? (int)workingTime * 0.7 : workingTime]]></Code>
							<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630577151770</Id>
					<Name><![CDATA[transition4]]></Name>
					<X>500</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-30</Y></Point>
						<Point><X>128</X><Y>-30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630577001515" Target="1631094981162" Trigger="arrival">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630577204826</Id>
					<Name><![CDATA[transition5]]></Name>
					<X>382</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>68</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630577175511" Target="1630577001515" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1630577216986</Id>
					<Name><![CDATA[transition6]]></Name>
					<X>370</X><Y>280</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-180</Y></Point>
						<Point><X>-70</X><Y>-180</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630577175511" Target="1630324022347" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[operatingSite == null || ((dayTime == 3) && randomTrue(0.6)) ||  randomTrue(0.05)

//operatingSite == null ]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1631094995875</Id>
					<Name><![CDATA[transition7]]></Name>
					<X>640</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-30</Y></Point>
						<Point><X>-90</X><Y>-30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1631094981162" Target="1630577082737" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[isHelpRequired(operatingSite)]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1631095009362</Id>
					<Name><![CDATA[transition8]]></Name>
					<X>640</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-30</Y></Point>
						<Point><X>50</X><Y>-30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1631094981162" Target="1631612683839" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[isHelpRequired(operatingSite)]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1631612729541</Id>
					<Name><![CDATA[transition9]]></Name>
					<X>740</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
						<Point><X>-490</X><Y>50</Y></Point>
						<Point><X>-490</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1631612839552" Target="1630324313827" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1631612845480</Id>
					<Name><![CDATA[transition10]]></Name>
					<X>740</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>70</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1631612683839" Target="1631612839552" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1631612901355</Id>
					<Name><![CDATA[transition11]]></Name>
					<X>752</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>78</X><Y>0</Y></Point>
						<Point><X>78</X><Y>-190</Y></Point>
						<Point><X>-202</X><Y>-190</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1631612839552" Target="1630577072590" Trigger="timeout">
						<Action><![CDATA[rejectedBefore = true;]]></Action>
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[rejects >= rejectTolerance]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1631613371916</Id>
					<Name><![CDATA[transition12]]></Name>
					<X>200</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-80</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630324022347" Target="1631613321902" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[(daysWorked >= workingDuration) || (rejectedBefore && randomTrue(0.3))]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1632424706031</Id>
					<Name><![CDATA[transition13]]></Name>
					<X>520</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-60</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1630577082737" Target="1630577072590" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[operatingSite == null]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1641904989222</Id>
					<Name><![CDATA[transition14]]></Name>
					<X>160</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>40</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1641904917419" Target="1630324313827" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[(int)triangular(3, 12, 6)]]></Code>
							<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1641396817929</Id>
					<Name><![CDATA[calculatePrediction]]></Name>
					<X>230</X><Y>720</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[tempOperatingSite]]></Name>
						<Type><![CDATA[OperatingSiteAgent]]></Type>
					</Parameter>
					<Body><![CDATA[int isFriend = 1;

       // Collections.shuffle(friendConnections.getConnections());



for (int a = 0; a < friendConnections.getConnections().size(); a++) {
    VolunteerAgent friend = friendConnections.getConnectedAgent(a);
    if ((friend.operatingSite == tempOperatingSite)&&(friend.isHelping)) {
        isFriend = 2;
        break;
    }

}

//current time
int time = getHourOfDay(date());
dayTime = 3;
if ((time >= 7) && (time < 13)) {
    dayTime = 1;
}
if ((time >= 13) && (time < 19)) {
    dayTime = 2;

}
int distance = (int) distanceTo(tempOperatingSite);
//int travelTime =(int)(distance/meterPerSecond)/60;
//umgestellte formel distance / 1000 / speed * 60


double distanceInKM = distance/ 1000;

double travelTime = (distanceInKM/travelSpeed)*60;


int travelTimeSelector =3;

if ((travelTime > 15) && (travelTime <= 30)) {
    travelTimeSelector = 2;
}

if (travelTime <= 15) {
    travelTimeSelector =1;
}
/*System.out.println("DAYVAL = " + dayValue + " HOUR OF DAY = " + time
+ " TRAVEL TIME = " + travelTime + "/" + travelTimeSelector);
*/


if((tempOperatingSite.information == 3)){
 if(!isHelpRequired(tempOperatingSite)){
 return 0.0;   
 }      
}



double prediction = main.pyCommunicator.runResults(
    double.class,
    "predictor.predict(" +
    main.temperature + "," +
    main.precipitation + "," +
    dayTime + "," +
    tempOperatingSite.impact + "," +
    tempOperatingSite.media + "," +
    tempOperatingSite.risk + "," +
    isFriend + "," +
    travelTimeSelector + "," +
    tempOperatingSite.information + ","+
    time + "," +
    distance +
    ")");



System.out.println("\n"+ "\n"+
    "PROBABILITY FOR OS: " + tempOperatingSite.name + "\n" +
    "temperature: " + main.temperature + "\n" +
    "precipitation: " + main.precipitation + "\n" +
    "dayTime: " + dayTime + ", Time hour is: " + time + "\n" +
    "impact: " + tempOperatingSite.impact + "\n" +
    "media: " + tempOperatingSite.media + "\n" +
    "risk: " + tempOperatingSite.risk + "\n" +
    "friend: " + isFriend + "\n" +
    "Travel Selector: " + travelTimeSelector + ", Traveltime: " + travelTime + "\n" +
       "speed: " + travelSpeed + "\n" +
    "distance: " + distance+ 
     "\n" +
    "information: " + tempOperatingSite.information + "\n" +"\n"+
    "PREDICTION: " + prediction + "\n" + "\n"
);


return prediction;
//double distanceBenefit =  -0.002*distanceInKM + 0.007;
//traceln("DISTANCE BENEFIT AND KM " + distanceBenefit + " " + distanceInKM);
/*
if((tempOperatingSite.information == 1 )&&(daysWorked == 0) ){ //wenn Helfer Erfahrugn hat, wird er auch um die Katastrophe wissen und einen nahegelegenen Einsatzort wählen
return prediction ;
}

double nightFactor = 0;
if(dayTime == 3){
if(time == 23){
nightFactor = - 0.003;
}
if(time == 0){
nightFactor = - 0.005;
}
if(time == 1){
nightFactor = - 0.01;
}
if(time == 2){
nightFactor = - 0.01;
}
if(time == 3){
nightFactor = - 0.01;
}
if(time == 4){
nightFactor = - 0.01;
}
if(time == 5){
nightFactor = - 0.005;
}
if(time == 6){
nightFactor = - 0.003;
}


}

double randomness = normal(0.05, 0);



System.out.println("TIME " + time + " FAKTOR " + dayTime + " STRAFE " + nightFactor + " PREDICTION " + prediction + distanceBenefit + nightFactor + randomness);



if((tempOperatingSite.information == 1 )&&(daysWorked == 0) ){ //wenn Helfer Erfahrugn hat, wird er auch um die Katastrophe wissen und einen nahegelegenen Einsatzort wählen
return prediction + nightFactor + randomness ;
}
return (prediction + distanceBenefit + nightFactor + randomness);

/*
System.out.println(
    "PROBABILITY FOR OS: " + tempOperatingSite.name + "\n" +
    "temperature: " + main.temperature + "\n" +
    "precipitation: " + main.precipitation + "\n" +
    "time: " + dayTime + ", Time hour is: " + time + "\n" +
    "impact: " + tempOperatingSite.impact + "\n" +
    "media: " + tempOperatingSite.media + "\n" +
    "risk: " + tempOperatingSite.risk + "\n" +
    "friend: " + isFriend + "\n" +
    "traveltime: " + travelTimeSelector + ", Time hour is: " + travelTime +
    "distance: " + distance+ 
     "\n" +
    "information: " + tempOperatingSite.information + "\n" +
    "PREDITION: " + prediction
);
return prediction;
    */
/*
System.out.println(
    "PROBABILITY FOR OS: " + value + "\n" +
    "temperature: " + main.temperature + "\n" +
    "precipitation: " + main.precipitation + "\n" +
    "time: " + dayValue + ", Time hour is: " + time + "\n" +
    "impact: " + tempOperatingSite.impact + "\n" +
    "media: " + tempOperatingSite.media + "\n" +
    "risk: " + tempOperatingSite.risk + "\n" +
    "friend: " + isFriend + "\n" +
    "traveltime: " + travelTimeSelector + ", Time hour is: " + travelTime +
    "distance: " + distance+ 
     "\n" +
    "information: " + tempOperatingSite.information + "\n" 
);
*/]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1641397792443</Id>
					<Name><![CDATA[setTravelingSpeed]]></Name>
					<X>230</X><Y>680</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[tempOperatingSite]]></Name>
						<Type><![CDATA[OperatingSiteAgent]]></Type>
					</Parameter>
					<Body><![CDATA[travelSpeed = 5;
int distance = (int) distanceTo(tempOperatingSite);
if(distance <= 1500){
travelSpeed = (int) triangular(5, 50, 7);
}else if (distance > 1500 && distance <= 5000){
travelSpeed = (int) triangular(5, 50, 14);
}else{
travelSpeed = (int) triangular(5, 50, 30);
}

setSpeed(travelSpeed, KPH);
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[boolean]]></ReturnType>
					<Id>1641400461290</Id>
					<Name><![CDATA[isHelpRequired]]></Name>
					<X>230</X><Y>790</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[tempOperatingSite]]></Name>
						<Type><![CDATA[OperatingSiteAgent]]></Type>
					</Parameter>
					<Body><![CDATA[

taskSelector = tempOperatingSite.returnRequirement(fitness);

if(taskSelector < 999){

return true;
}else{

return false;
}

/*
if(fitness == 1){



}

for (int i = 1; i < fitness+1; i++) {
     System.out.println(isFull[i]);
  if(isFull[i] < 100){
  if(tempValue >= isFull[i]){
   
    tempValue = isFull[i];
    selected = i + 1;

  }

  }
  
}



/*
double [] isFull = {bool_admin_full, bool_easy_full, bool_medium_full, bool_heavy_full};
taskSelector = 100;

 

double tempValue = 0; 
int selected = 1;
 
//if(main.onSitePolicy == "REQUIRED"){


for (int i = 1; i < fitness+1; i++) {
     System.out.println(isFull[i]);
  if(isFull[i] < 100){
  if(tempValue >= isFull[i]){
   
    tempValue = isFull[i];
    selected = i + 1;

  }

  }
  
}
if(taskSelector < 100){
  System.out.println("CHOSEN TASK " + taskSelector);
return true;
}

return false;
/*
}else{



for (int i = (fitness-1); i >= 0; i--) {
  if(isFull[i] < 1){

    taskSelector = i + 1;
	  return true;
  

  }

  
}

return false;


}

/*

if(tempOperatingSite.bool_admin_full && tempOperatingSite.bool_easy_full && tempOperatingSite.bool_medium_full && tempOperatingSite.bool_heavy_full){
	return false;
}

if(fitness == 1){
	if(tempOperatingSite.bool_admin_full){
 		taskSelector = 1;
        return true;
	}
}




switch (fitness) {
  case 1:
       if (required_admin) {
            taskSelector = 1;
            return true;
        }else{
        return false;
        }

    case 2:
        if (required_easy) {
            taskSelector = 2;
            return true;
        } else if (required_admin) {
            taskSelector = 1;
            return true;
        }else{
        return false;
        }
   
    case 3:
        if (required_medium) {
            taskSelector = 3;
            return true;
        } else if (required_easy) {
            taskSelector = 2;
            return true;
        } else if (required_admin) {
            taskSelector = 1;
            return true;
        }else{
        return false;
        }
  
    case 4:
        if (required_heavy) {
            taskSelector = 4;
            return true;
        } else if (required_medium) {
            taskSelector = 3;
            return true;
        } else if (required_easy) {
            taskSelector = 2;
            return true;
        } else if (required_admin) {
            taskSelector = 1;
            return true;
        }else{
        return false;
        }
     
    default:
        break;
}
        return false;
*/]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1620825959699</Id>
					<Name><![CDATA[friendConnections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentReferenceId>1620825959704</AgentReferenceId>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[VolunteerAgent]]></ClassName>
						<ItemName><![CDATA[scenarioStart]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1632422178960</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1620825959703</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<Oval>
					<Id>1620827911582</Id>
					<Name><![CDATA[oval]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>0</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<RadiusX>1</RadiusX>
					<RadiusY>40</RadiusY>
					<Rotation>0.0</Rotation>
					<FillColor>-65281</FillColor>
					<FillMaterial>null</FillMaterial>
				</Oval>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1620825994347</Id>
			<Name><![CDATA[OperatingSiteAgent]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1620825994345</Id>
				<Name><![CDATA[1620825994345]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>false</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1620892800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[HOUR]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1620825994343</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1620825994346</CurrentLevel>
			<ConnectionsId>1620825994342</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1632477445651</Id>
					<Name><![CDATA[num_currentRejects]]></Name>
					<X>760</X><Y>-140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632478962592</Id>
					<Name><![CDATA[num_currentVolunteers_admin]]></Name>
					<X>250</X><Y>-20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632478972851</Id>
					<Name><![CDATA[num_currentVolunteers_easy]]></Name>
					<X>250</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632478985158</Id>
					<Name><![CDATA[num_currentVolunteers_medium]]></Name>
					<X>250</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1632478994586</Id>
					<Name><![CDATA[num_currentVolunteers_heavy]]></Name>
					<X>250</X><Y>40</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1658837192130</Id>
					<Name><![CDATA[num_util_admin]]></Name>
					<X>460</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1658837192133</Id>
					<Name><![CDATA[num_util_easy]]></Name>
					<X>460</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1658837192135</Id>
					<Name><![CDATA[num_util_medium]]></Name>
					<X>460</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1658837192137</Id>
					<Name><![CDATA[num_util_heavy]]></Name>
					<X>460</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1620826494110</Id>
					<Name><![CDATA[num_operatingSiteID]]></Name>
					<X>250</X><Y>-200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<ParameterEditor>
							<Id>1620826494108</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631614190682</Id>
					<Name><![CDATA[impact]]></Name>
					<X>600</X><Y>-200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631614190680</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631614248205</Id>
					<Name><![CDATA[media]]></Name>
					<X>600</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631614248203</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631614274823</Id>
					<Name><![CDATA[risk]]></Name>
					<X>600</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631614274821</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631614288883</Id>
					<Name><![CDATA[information]]></Name>
					<X>600</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631614288881</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1631699370431</Id>
					<Name><![CDATA[name]]></Name>
					<X>450</X><Y>-150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[String]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA["Operating Site NAME"]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1631699370429</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1632427922625</Id>
					<Name><![CDATA[num_requiredVolunteers_admin]]></Name>
					<X>250</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1632427922623</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1632427937267</Id>
					<Name><![CDATA[num_requiredVolunteers_easy]]></Name>
					<X>250</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1632427937265</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1632427955279</Id>
					<Name><![CDATA[num_requiredVolunteers_medium]]></Name>
					<X>250</X><Y>-80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1632427955277</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1632427971134</Id>
					<Name><![CDATA[num_requiredVolunteers_heavy]]></Name>
					<X>250</X><Y>-60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[5]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>1632427971132</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1620826032389</Id>
					<Name><![CDATA[operating]]></Name>
					<X>70</X><Y>270</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="270" Height="30">
						<FillColor>-16711936</FillColor>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1620826017153</Id>
					<Name><![CDATA[OperatingSiteCreated]]></Name>
					<X>210</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
					</Points>
					<Properties Target="1620826032389">
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1658837281206</Id>
					<Name><![CDATA[updateVariable]]></Name>
					<X>450</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[add]]></Name>
						<Type><![CDATA[boolean]]></Type>
					</Parameter>
					<Parameter>
						<Name><![CDATA[type]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[if(type == 1){
if(add){
num_currentVolunteers_admin = num_currentVolunteers_admin +1;
}else{
num_currentVolunteers_admin = num_currentVolunteers_admin -1;
}
num_util_admin = (double)num_currentVolunteers_admin/(double)num_requiredVolunteers_admin;
}

if(type == 2){
if(add){
num_currentVolunteers_easy = num_currentVolunteers_easy +1;
}else{
num_currentVolunteers_easy = num_currentVolunteers_easy -1;
}
num_util_easy = (double)num_currentVolunteers_easy/(double)num_requiredVolunteers_easy;
}


if(type == 3){
if(add){
num_currentVolunteers_medium = num_currentVolunteers_medium +1;
}else{
num_currentVolunteers_medium = num_currentVolunteers_medium -1;
}
num_util_medium = (double)num_currentVolunteers_medium/(double)num_requiredVolunteers_medium;
}


if(type == 4){
if(add){
num_currentVolunteers_heavy = num_currentVolunteers_heavy +1;
}else{
num_currentVolunteers_heavy = num_currentVolunteers_heavy -1;
}
num_util_heavy = (double)num_currentVolunteers_heavy/(double)num_requiredVolunteers_heavy;
}
]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[int]]></ReturnType>
					<Id>1658839406284</Id>
					<Name><![CDATA[returnRequirement]]></Name>
					<X>450</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[fitness]]></Name>
						<Type><![CDATA[int]]></Type>
					</Parameter>
					<Body><![CDATA[double[][] doubleValues = {{1.0, num_util_admin}, {2.0, num_util_easy},
{3.0, num_util_medium},
{4.0, num_util_heavy},
};



Arrays.sort(doubleValues, (b, a) -> Double.compare(b[1], a[1]));


double currentValue = 0;
double currentSelected = 1;





for(int i = 0; i < doubleValues.length; i++){
//System.out.println("VALUE " + doubleValues[i][1] + " ID " + doubleValues[i][0]);
if(((int)doubleValues[i][0] <= fitness) && (doubleValues[i][1] < 1)){

return (int)doubleValues[i][0];
}

}

return 999;










]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1620825994342</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[String]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[OperatingSiteAgent]]></ClassName>
						<ItemName><![CDATA[OperatingSiteCreated]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1620825994357</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[dss2save]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1620825994346</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>

			<Presentation>
				<Oval>
					<Id>1630323958168</Id>
					<Name><![CDATA[oval]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>0</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<RadiusX>17.5</RadiusX>
					<RadiusY>40</RadiusY>
					<Rotation>0.0</Rotation>
					<FillColor>-1</FillColor>
					<FillMaterial>null</FillMaterial>
				</Oval>
				<Text>
					<Id>1631704703599</Id>
					<Name><![CDATA[text]]></Name>
					<X>350</X><Y>50</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[https://download.geofabrik.de/ mapfile download (currently only saxony-anhalt)
]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>1000</Width>
		<Height>600</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>true</ShutdownCompact>
		<ImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>
	
	<RunConfiguration ActiveObjectClassId="1620825773714">
		<Id>1620825773728</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>32000</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1620777600000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1623456000000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>1.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1620825773714">
			<Id>1620825773725</Id>
			<Name><![CDATA[RunDSS2SaVe]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Import><![CDATA[import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;
import java.io.IOException;
import java.net.*;
import ai.h2o.mojos.runtime.MojoPipeline;
import ai.h2o.mojos.runtime.api.MojoPipelineService;
import ai.h2o.mojos.runtime.frame.MojoFrame;
import ai.h2o.mojos.runtime.frame.MojoFrameBuilder;
import ai.h2o.mojos.runtime.frame.MojoRowBuilder;
import ai.h2o.mojos.runtime.lic.LicenseException;
import java.io.File;
import dss2save.*;
import org.apache.commons.lang3.ArrayUtils;
 import java.util.Arrays;

import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse.BodyHandlers;

import java.util.HashMap;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.json.simple.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonProperty; 

import org.opengis.filter.expression.VolatileFunction;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<InitialSetupCode><![CDATA[try {
simulationServer = new SimulationServer(getEngine());
getEngine().getExperimentHost().setDeveloperPanelEnabled(false);
getEngine().getExperimentHost().setRunControlEnabled(false);

} catch (IOException e) {
System.out.println(e);
}]]></InitialSetupCode>
			<MaximumMemory>40000</MaximumMemory>
			<RandomNumberGenerationType>randomSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<AfterSimulationRunCode><![CDATA[//root.finishedExperiment();




]]></AfterSimulationRunCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1636715898218</Id>
					<Name><![CDATA[simulationServer]]></Name>
					<X>400</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[SimulationServer]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1636718705197</Id>
					<Name><![CDATA[main]]></Name>
					<X>400</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Main]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1636719555743</Id>
					<Name><![CDATA[scenario]]></Name>
					<X>400</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA["HELLO"]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
			</Variables>

			<Presentation>
				<Text>
					<Id>1620825773726</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[DSS2SaVe]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[precipitation]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[temperature]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[initScenario]]></ParameterName>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>false</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[virtualTime]]></ExecutionMode>
				<Title><![CDATA[DSS2SaVe : Simulation]]></Title>	
				<EnableDeveloperPanel>false</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>500.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1631624400000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1623456000000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>false</BypassInitialScreen>
		</SimulationExperiment>
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1620825773714">
			<Id>1644406838245</Id>
			<Name><![CDATA[DebugExperiment]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>16384</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1644406838246</Id>
					<Name><![CDATA[text]]></Name>
					<X>50</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[DSS2SaVe]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Presentation>

			<Parameters>			
				<Parameter>
					<ParameterName><![CDATA[precipitation]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[temperature]]></ParameterName>
				</Parameter>
				<Parameter>
					<ParameterName><![CDATA[initScenario]]></ParameterName>
					<ParameterValue Class="CodeValue">
						<Code><![CDATA["/Users/sebastianlindner/Downloads/dss2save-manager/server/scenarios/2022/February/Neues tolles SCenario 352.svcsdl"]]></Code>
					</ParameterValue>
				</Parameter>
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[virtualTime]]></ExecutionMode>
				<Title><![CDATA[DSS2SaVe : DebugExperiment]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>true</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1631624400000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1623456000000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>true</BypassInitialScreen>
		</SimulationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633940967160</Id>
			<Name><![CDATA[Distribution]]></Name>
			<Text><![CDATA[

import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "min",
    "mod",
    "max"
})
@Generated("jsonschema2pojo")
public class Distribution {

    /**
     * Min
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("min")
    private Integer min;
    /**
     * Mod
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("mod")
    private Integer mod;
    /**
     * Max
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("max")
    private Integer max;

    /**
     * No args constructor for use in serialization
     * 
     */
    public Distribution() {
    }

    /**
     * 
     * @param min
     * @param mod
     * @param max
     */
    public Distribution(Integer min, Integer mod, Integer max) {
        super();
        this.min = min;
        this.mod = mod;
        this.max = max;
    }

    /**
     * Min
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("min")
    public Integer getMin() {
        return min;
    }

    /**
     * Min
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("min")
    public void setMin(Integer min) {
        this.min = min;
    }

    /**
     * Mod
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("mod")
    public Integer getMod() {
        return mod;
    }

    /**
     * Mod
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("mod")
    public void setMod(Integer mod) {
        this.mod = mod;
    }

    /**
     * Max
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("max")
    public Integer getMax() {
        return max;
    }

    /**
     * Max
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("max")
    public void setMax(Integer max) {
        this.max = max;
    }

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633940990887</Id>
			<Name><![CDATA[Duration]]></Name>
			<Text><![CDATA[import java.util.Date;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The duration of the disaster
 * <p>
 * Describes the start and end of the disaster
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({ "startDate", "endDate" })
@Generated("jsonschema2pojo")
public class Duration {

    /**
     *
     * (Required)
     *
     */
    @JsonProperty("startDate")
    private Date startDate = new Date(1633087200000L);
    /**
     *
     * (Required)
     *
     */
    @JsonProperty("endDate")
    private Date endDate = new Date(1633087200000L);

    /**
     * No args constructor for use in serialization
     *
     */
    public Duration() {
    }

    /**
     *
     * @param endDate
     * @param startDate
     */
    public Duration(Date startDate, Date endDate) {
        super();
        this.startDate = startDate;
        this.endDate = endDate;
    }

    /**
     *
     * (Required)
     *
     */
    @JsonProperty("startDate")
    public Date getStartDate() {
        return startDate;
    }

    /**
     *
     * (Required)
     *
     */
    @JsonProperty("startDate")
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    /**
     *
     * (Required)
     *
     */
    @JsonProperty("endDate")
    public Date getEndDate() {
        return endDate;
    }

    /**
     *
     * (Required)
     *
     */
    @JsonProperty("endDate")
    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633941012954</Id>
			<Name><![CDATA[ScenarioEvent]]></Name>
			<Text><![CDATA[
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
"id",
"name",
"description",
"datetime",
"temperature",
"precipitation",
"operatingSites"
})
@Generated("jsonschema2pojo")
public class ScenarioEvent {

/**
* ID
* <p>
*
* (Required)
*
*/
@JsonProperty("id")
private Integer id = 0;
/**
* ScenarioEvent name
* <p>
*
* (Required)
*
*/
@JsonProperty("name")
private String name = "New event";
/**
* A short decription of the event
* <p>
* Describe the event to enable third parties to understand it.
* (Required)
*
*/
@JsonProperty("description")
@JsonPropertyDescription("Describe the event to enable third parties to understand it.")
private String description;
/**
*
* (Required)
*
*/
@JsonProperty("datetime")
private Date datetime = new Date(1633087200000L);
/**
* Temperature
* <p>
* 1 = hot, 2 = moderate, 3 = cold.
* (Required)
*
*/
@JsonProperty("temperature")
@JsonPropertyDescription("1 = hot, 2 = moderate, 3 = cold.")
private Integer temperature;
/**
* Precipitation
* <p>
* 1 = none, 2 = low, 3 = strong
* (Required)
*
*/
@JsonProperty("precipitation")
@JsonPropertyDescription("1 = none, 2 = low, 3 = strong")
private Integer precipitation;
/**
* Operating Sites
* <p>
*
* (Required)
*
*/
@JsonProperty("operatingSites")
private List<OperatingSite> operatingSites = null;

/**
* No args constructor for use in serialization
*
*/
public ScenarioEvent() {
}

/**
*
* @param precipitation
* @param datetime
* @param name
* @param temperature
* @param description
* @param id
* @param operatingSites
*/
public ScenarioEvent(Integer id, String name, String description, Date datetime, Integer temperature, Integer precipitation, List<OperatingSite> operatingSites) {
super();
this.id = id;
this.name = name;
this.description = description;
this.datetime = datetime;
this.temperature = temperature;
this.precipitation = precipitation;
this.operatingSites = operatingSites;
}

/**
* ID
* <p>
*
* (Required)
*
*/
@JsonProperty("id")
public Integer getId() {
return id;
}

/**
* ID
* <p>
*
* (Required)
*
*/
@JsonProperty("id")
public void setId(Integer id) {
this.id = id;
}

/**
* ScenarioEvent name
* <p>
*
* (Required)
*
*/
@JsonProperty("name")
public String getName() {
return name;
}

/**
* ScenarioEvent name
* <p>
*
* (Required)
*
*/
@JsonProperty("name")
public void setName(String name) {
this.name = name;
}

/**
* A short decription of the event
* <p>
* Describe the event to enable third parties to understand it.
* (Required)
*
*/
@JsonProperty("description")
public String getDescription() {
return description;
}

/**
* A short decription of the event
* <p>
* Describe the event to enable third parties to understand it.
* (Required)
*
*/
@JsonProperty("description")
public void setDescription(String description) {
this.description = description;
}

/**
*
* (Required)
*
*/
@JsonProperty("datetime")
public Date getDatetime() {
return datetime;
}

/**
*
* (Required)
*
*/
@JsonProperty("datetime")
public void setDatetime(Date datetime) {
this.datetime = datetime;
}

/**
* Temperature
* <p>
* 1 = hot, 2 = moderate, 3 = cold.
* (Required)
*
*/
@JsonProperty("temperature")
public Integer getTemperature() {
return temperature;
}

/**
* Temperature
* <p>
* 1 = hot, 2 = moderate, 3 = cold.
* (Required)
*
*/
@JsonProperty("temperature")
public void setTemperature(Integer temperature) {
this.temperature = temperature;
}

/**
* Precipitation
* <p>
* 1 = none, 2 = low, 3 = strong
* (Required)
*
*/
@JsonProperty("precipitation")
public Integer getPrecipitation() {
return precipitation;
}

/**
* Precipitation
* <p>
* 1 = none, 2 = low, 3 = strong
* (Required)
*
*/
@JsonProperty("precipitation")
public void setPrecipitation(Integer precipitation) {
this.precipitation = precipitation;
}

/**
* Operating Sites
* <p>
*
* (Required)
*
*/
@JsonProperty("operatingSites")
public List<OperatingSite> getOperatingSites() {
	Collections.shuffle(operatingSites);
return operatingSites;
}

/**
* Operating Sites
* <p>
*
* (Required)
*
*/
@JsonProperty("operatingSites")
public void setOperatingSites(List<OperatingSite> operatingSites) {
this.operatingSites = operatingSites;
}



}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633941064087</Id>
			<Name><![CDATA[FitnessDistribution]]></Name>
			<Text><![CDATA[
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Individual fitness distribution
 * <p>
 * The percentage of people that are physically able to fulfill certain tasks.
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "admin",
    "easy",
    "medium",
    "heavy"
})
@Generated("jsonschema2pojo")
public class FitnessDistribution {

    /**
     * Administrative Tasks
     * <p>
     * e.g. documenting, situation monitoring, counting people
     * (Required)
     * 
     */
    @JsonProperty("admin")
    @JsonPropertyDescription("e.g. documenting, situation monitoring, counting people")
    private Integer admin;
    /**
     * Easy Tasks
     * <p>
     * e.g. carrying things, providing food and water
     * (Required)
     * 
     */
    @JsonProperty("easy")
    @JsonPropertyDescription("e.g. carrying things, providing food and water")
    private Integer easy;
    /**
     * Medium Tasks
     * <p>
     * e.g. filling sandbags
     * (Required)
     * 
     */
    @JsonProperty("medium")
    @JsonPropertyDescription("e.g. filling sandbags")
    private Integer medium;
    /**
     * Heavy Tasks
     * <p>
     * e.g. carrying sandbags
     * (Required)
     * 
     */
    @JsonProperty("heavy")
    @JsonPropertyDescription("e.g. carrying sandbags")
    private Integer heavy;

    /**
     * No args constructor for use in serialization
     * 
     */
    public FitnessDistribution() {
    }

    /**
     * 
     * @param admin
     * @param medium
     * @param easy
     * @param heavy
     */
    public FitnessDistribution(Integer admin, Integer easy, Integer medium, Integer heavy) {
        super();
        this.admin = admin;
        this.easy = easy;
        this.medium = medium;
        this.heavy = heavy;
    }

    /**
     * Administrative Tasks
     * <p>
     * e.g. documenting, situation monitoring, counting people
     * (Required)
     * 
     */
    @JsonProperty("admin")
    public Integer getAdmin() {
        return admin;
    }

    /**
     * Administrative Tasks
     * <p>
     * e.g. documenting, situation monitoring, counting people
     * (Required)
     * 
     */
    @JsonProperty("admin")
    public void setAdmin(Integer admin) {
        this.admin = admin;
    }

    /**
     * Easy Tasks
     * <p>
     * e.g. carrying things, providing food and water
     * (Required)
     * 
     */
    @JsonProperty("easy")
    public Integer getEasy() {
        return easy;
    }

    /**
     * Easy Tasks
     * <p>
     * e.g. carrying things, providing food and water
     * (Required)
     * 
     */
    @JsonProperty("easy")
    public void setEasy(Integer easy) {
        this.easy = easy;
    }

    /**
     * Medium Tasks
     * <p>
     * e.g. filling sandbags
     * (Required)
     * 
     */
    @JsonProperty("medium")
    public Integer getMedium() {
        return medium;
    }

    /**
     * Medium Tasks
     * <p>
     * e.g. filling sandbags
     * (Required)
     * 
     */
    @JsonProperty("medium")
    public void setMedium(Integer medium) {
        this.medium = medium;
    }

    /**
     * Heavy Tasks
     * <p>
     * e.g. carrying sandbags
     * (Required)
     * 
     */
    @JsonProperty("heavy")
    public Integer getHeavy() {
        return heavy;
    }

    /**
     * Heavy Tasks
     * <p>
     * e.g. carrying sandbags
     * (Required)
     * 
     */
    @JsonProperty("heavy")
    public void setHeavy(Integer heavy) {
        this.heavy = heavy;
    }

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633941078117</Id>
			<Name><![CDATA[GeoPoint]]></Name>
			<Text><![CDATA[
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;


/**
 * GeoJSON Point
 * <p>
 * 
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "type",
    "coordinates",
    "bbox"
})
@Generated("jsonschema2pojo")
public class GeoPoint {

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("type")
    private GeoPoint.Type type;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("coordinates")
    private List<Double> coordinates = null;
    @JsonProperty("bbox")
    private List<Double> bbox = null;

    /**
     * No args constructor for use in serialization
     * 
     */
    public GeoPoint() {
    }

    /**
     * 
     * @param bbox
     * @param coordinates
     * @param type
     */
    public GeoPoint(GeoPoint.Type type, List<Double> coordinates, List<Double> bbox) {
        super();
        this.type = type;
        this.coordinates = coordinates;
        this.bbox = bbox;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("type")
    public GeoPoint.Type getType() {
        return type;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("type")
    public void setType(GeoPoint.Type type) {
        this.type = type;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("coordinates")
    public List<Double> getCoordinates() {
        return coordinates;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("coordinates")
    public void setCoordinates(List<Double> coordinates) {
        this.coordinates = coordinates;
    }

    @JsonProperty("bbox")
    public List<Double> getBbox() {
        return bbox;
    }

    @JsonProperty("bbox")
    public void setBbox(List<Double> bbox) {
        this.bbox = bbox;
    }

    @Generated("jsonschema2pojo")
    public enum Type {

        POINT("Point");
        private final String value;
        private final static Map<String, GeoPoint.Type> CONSTANTS = new HashMap<String, GeoPoint.Type>();

        static {
            for (GeoPoint.Type c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Type(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static GeoPoint.Type fromValue(String value) {
            GeoPoint.Type constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633941091708</Id>
			<Name><![CDATA[GeoPolygon]]></Name>
			<Text><![CDATA[
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;


/**
 * GeoJSON Polygon
 * <p>
 * 
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "type",
    "coordinates",
    "bbox"
})
@Generated("jsonschema2pojo")
public class GeoPolygon {

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("type")
    private GeoPolygon.Type type;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("coordinates")
    private List<List<List<Double>>> coordinates = null;
    @JsonProperty("bbox")
    private List<Double> bbox = null;

    /**
     * No args constructor for use in serialization
     * 
     */
    public GeoPolygon() {
    }

    /**
     * 
     * @param bbox
     * @param coordinates
     * @param type
     */
    public GeoPolygon(GeoPolygon.Type type, List<List<List<Double>>> coordinates, List<Double> bbox) {
        super();
        this.type = type;
        this.coordinates = coordinates;
        this.bbox = bbox;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("type")
    public GeoPolygon.Type getType() {
        return type;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("type")
    public void setType(GeoPolygon.Type type) {
        this.type = type;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("coordinates")
    public List<List<List<Double>>> getCoordinates() {
        return coordinates;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("coordinates")
    public void setCoordinates(List<List<List<Double>>> coordinates) {
        this.coordinates = coordinates;
    }

    @JsonProperty("bbox")
    public List<Double> getBbox() {
        return bbox;
    }

    @JsonProperty("bbox")
    public void setBbox(List<Double> bbox) {
        this.bbox = bbox;
    }

    @Generated("jsonschema2pojo")
    public enum Type {

        POLYGON("Polygon");
        private final String value;
        private final static Map<String, GeoPolygon.Type> CONSTANTS = new HashMap<String, GeoPolygon.Type>();

        static {
            for (GeoPolygon.Type c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Type(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        @JsonValue
        public String value() {
            return this.value;
        }

        @JsonCreator
        public static GeoPolygon.Type fromValue(String value) {
            GeoPolygon.Type constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633941109458</Id>
			<Name><![CDATA[OperatingSite]]></Name>
			<Text><![CDATA[
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "id",
    "name",
    "location",
    "impact",
    "risk",
    "mediaCoverage",
    "information",
    "requiredVolunteers"
})
@Generated("jsonschema2pojo")
public class OperatingSite {

    /**
     * ID
     * <p>
     * Each operating site needs a unique ID. It is required to reference existing operating sites during simulation runs.
     * (Required)
     * 
     */
    @JsonProperty("id")
    @JsonPropertyDescription("Each operating site needs a unique ID. It is required to reference existing operating sites during simulation runs.")
    private Integer id = 0;
    /**
     * Name
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("name")
    private String name = "Operating Site Market Place";
    /**
     * GeoJSON Point
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("location")
    private GeoPoint location;
    /**
     * Impact
     * <p>
     *  1 = low, 2 = medium, 3 = severs.
     * (Required)
     * 
     */
    @JsonProperty("impact")
    @JsonPropertyDescription("1 = low, 2 = medium, 3 = severs.")
    private Integer impact;
    /**
     * Risk
     * <p>
     *  1 = none, 2 = low, 3 = strong
     * (Required)
     * 
     */
    @JsonProperty("risk")
    @JsonPropertyDescription("1 = none, 2 = low, 3 = strong")
    private Integer risk;
    /**
     * Media Coverage
     * <p>
     *  1 = none, 2 = low, 3 = strong
     * (Required)
     * 
     */
    @JsonProperty("mediaCoverage")
    @JsonPropertyDescription("1 = none, 2 = low, 3 = strong")
    private Integer mediaCoverage;
    /**
     * Information
     * <p>
     *  1 = none, 2 = few, 3 = full.
     * (Required)
     * 
     */
    @JsonProperty("information")
    @JsonPropertyDescription("1 = none, 2 = few, 3 = full.")
    private Integer information;
    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("requiredVolunteers")
    private RequiredVolunteers requiredVolunteers;

    /**
     * No args constructor for use in serialization
     * 
     */
    public OperatingSite() {
    }

    /**
     * 
     * @param requiredVolunteers
     * @param impact
     * @param name
     * @param location
     * @param risk
     * @param mediaCoverage
     * @param information
     * @param id
     */
    public OperatingSite(Integer id, String name, GeoPoint location, Integer impact, Integer risk, Integer mediaCoverage, Integer information, RequiredVolunteers requiredVolunteers) {
        super();
        this.id = id;
        this.name = name;
        this.location = location;
        this.impact = impact;
        this.risk = risk;
        this.mediaCoverage = mediaCoverage;
        this.information = information;
        this.requiredVolunteers = requiredVolunteers;
    }

    /**
     * ID
     * <p>
     * Each operating site needs a unique ID. It is required to reference existing operating sites during simulation runs.
     * (Required)
     * 
     */
    @JsonProperty("id")
    public Integer getId() {
        return id;
    }

    /**
     * ID
     * <p>
     * Each operating site needs a unique ID. It is required to reference existing operating sites during simulation runs.
     * (Required)
     * 
     */
    @JsonProperty("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Name
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * Name
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * GeoJSON Point
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("location")
    public GeoPoint getLocation() {
        return location;
    }

    /**
     * GeoJSON Point
     * <p>
     * 
     * (Required)
     * 
     */
    @JsonProperty("location")
    public void setLocation(GeoPoint location) {
        this.location = location;
    }

    /**
     * Impact
     * <p>
     *  1 = low, 2 = medium, 3 = severs.
     * (Required)
     * 
     */
    @JsonProperty("impact")
    public Integer getImpact() {
        return impact;
    }

    /**
     * Impact
     * <p>
     *  1 = low, 2 = medium, 3 = severs.
     * (Required)
     * 
     */
    @JsonProperty("impact")
    public void setImpact(Integer impact) {
        this.impact = impact;
    }

    /**
     * Risk
     * <p>
     *  1 = none, 2 = low, 3 = strong
     * (Required)
     * 
     */
    @JsonProperty("risk")
    public Integer getRisk() {
        return risk;
    }

    /**
     * Risk
     * <p>
     *  1 = none, 2 = low, 3 = strong
     * (Required)
     * 
     */
    @JsonProperty("risk")
    public void setRisk(Integer risk) {
        this.risk = risk;
    }

    /**
     * Media Coverage
     * <p>
     *  1 = none, 2 = low, 3 = strong
     * (Required)
     * 
     */
    @JsonProperty("mediaCoverage")
    public Integer getMediaCoverage() {
        return mediaCoverage;
    }

    /**
     * Media Coverage
     * <p>
     *  1 = none, 2 = low, 3 = strong
     * (Required)
     * 
     */
    @JsonProperty("mediaCoverage")
    public void setMediaCoverage(Integer mediaCoverage) {
        this.mediaCoverage = mediaCoverage;
    }

    /**
     * Information
     * <p>
     *  1 = none, 2 = few, 3 = full.
     * (Required)
     * 
     */
    @JsonProperty("information")
    public Integer getInformation() {
        return information;
    }

    /**
     * Information
     * <p>
     *  1 = none, 2 = few, 3 = full.
     * (Required)
     * 
     */
    @JsonProperty("information")
    public void setInformation(Integer information) {
        this.information = information;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("requiredVolunteers")
    public RequiredVolunteers getRequiredVolunteers() {
        return requiredVolunteers;
    }

    /**
     * 
     * (Required)
     * 
     */
    @JsonProperty("requiredVolunteers")
    public void setRequiredVolunteers(RequiredVolunteers requiredVolunteers) {
        this.requiredVolunteers = requiredVolunteers;
    }



}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633941145199</Id>
			<Name><![CDATA[RequiredVolunteers]]></Name>
			<Text><![CDATA[
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "admin",
    "easy",
    "medium",
    "heavy"
})
@Generated("jsonschema2pojo")
public class RequiredVolunteers {

    /**
     * Admin tasks
     * <p>
     * e.g. documenting, situation monitoring, counting people
     * (Required)
     * 
     */
    @JsonProperty("admin")
    @JsonPropertyDescription("e.g. documenting, situation monitoring, counting people")
    private Integer admin;
    /**
     * Easy tasks
     * <p>
     * e.g. carrying things, providing food and water
     * (Required)
     * 
     */
    @JsonProperty("easy")
    @JsonPropertyDescription("e.g. carrying things, providing food and water")
    private Integer easy;
    /**
     * Medium tasks
     * <p>
     * e.g. filling sandbags
     * (Required)
     * 
     */
    @JsonProperty("medium")
    @JsonPropertyDescription("e.g. filling sandbags")
    private Integer medium;
    /**
     * Heavy tasks
     * <p>
     * e.g. carrying sandbags
     * (Required)
     * 
     */
    @JsonProperty("heavy")
    @JsonPropertyDescription("e.g. carrying sandbags")
    private Integer heavy;

    /**
     * No args constructor for use in serialization
     * 
     */
    public RequiredVolunteers() {
    }

    /**
     * 
     * @param admin
     * @param medium
     * @param easy
     * @param heavy
     */
    public RequiredVolunteers(Integer admin, Integer easy, Integer medium, Integer heavy) {
        super();
        this.admin = admin;
        this.easy = easy;
        this.medium = medium;
        this.heavy = heavy;
    }

    /**
     * Admin tasks
     * <p>
     * e.g. documenting, situation monitoring, counting people
     * (Required)
     * 
     */
    @JsonProperty("admin")
    public Integer getAdmin() {
        return admin;
    }

    /**
     * Admin tasks
     * <p>
     * e.g. documenting, situation monitoring, counting people
     * (Required)
     * 
     */
    @JsonProperty("admin")
    public void setAdmin(Integer admin) {
        this.admin = admin;
    }

    /**
     * Easy tasks
     * <p>
     * e.g. carrying things, providing food and water
     * (Required)
     * 
     */
    @JsonProperty("easy")
    public Integer getEasy() {
        return easy;
    }

    /**
     * Easy tasks
     * <p>
     * e.g. carrying things, providing food and water
     * (Required)
     * 
     */
    @JsonProperty("easy")
    public void setEasy(Integer easy) {
        this.easy = easy;
    }

    /**
     * Medium tasks
     * <p>
     * e.g. filling sandbags
     * (Required)
     * 
     */
    @JsonProperty("medium")
    public Integer getMedium() {
        return medium;
    }

    /**
     * Medium tasks
     * <p>
     * e.g. filling sandbags
     * (Required)
     * 
     */
    @JsonProperty("medium")
    public void setMedium(Integer medium) {
        this.medium = medium;
    }

    /**
     * Heavy tasks
     * <p>
     * e.g. carrying sandbags
     * (Required)
     * 
     */
    @JsonProperty("heavy")
    public Integer getHeavy() {
        return heavy;
    }

    /**
     * Heavy tasks
     * <p>
     * e.g. carrying sandbags
     * (Required)
     * 
     */
    @JsonProperty("heavy")
    public void setHeavy(Integer heavy) {
        this.heavy = heavy;
    }

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1633943477885</Id>
			<Name><![CDATA[NestList]]></Name>
			<Text><![CDATA[
import java.util.LinkedList;
import java.util.List;
import static java.util.Arrays.asList;

public class NestList {

    public static List<Double> flatten(List<?> list) {
        List<Double> ret = new LinkedList<Double>();
        flattenHelper(list, ret);
        return ret;
    }

    public static void flattenHelper(List<?> nestedList, List<Double> flatList) {
        for (Object item : nestedList) {
            if (item instanceof List<?>) {
                flattenHelper((List<?>) item, flatList);
            } else {
                flatList.add((Double) item);
            }
        }
    }



    public static List<Object> lst(Object... objs) {
        return asList(objs);
    }

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1636632451631</Id>
			<Name><![CDATA[SimulationServer]]></Name>
			<Text><![CDATA[import com.sun.net.httpserver.HttpContext;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpServer;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.http.HttpHeaders;
import com.sun.net.httpserver.Headers;
import com.anylogic.engine.Experiment;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonProperty;

public class SimulationServer {

	private static Engine simulationRun;
	private static String scenario;

	/**
	 * Default constructor
	 */
	public SimulationServer(Engine e) throws IOException {
		simulationRun = e;
		HttpServer server = HttpServer
				.create(new InetSocketAddress(8000), 0);
		HttpContext context = server
				.createContext("/start");
		context.setHandler(SimulationServer::handleRequest);
		server.start();

	}

	private static void handleRequest(HttpExchange exchange)
			throws IOException {
		traceln("NEW REQUEST");
		
		
		
		

		
		
		

		simulationRun.getExperiment().getEngine().finish();
		simulationRun.finish();
		simulationRun.stop();

		simulationRun.getExperiment().reset();
		// Create new top-level agent:

		// Setup parameters of top-level agent here

		StringBuilder sb = new StringBuilder();
		InputStream ios = exchange.getRequestBody();
		int i;
		while ((i = ios.read()) != -1) {
			sb.append((char) i);
		}
		scenario = sb.toString();

		MyRunnable1 myRunnable = new MyRunnable1(
				simulationRun, scenario);

		Thread t = new Thread(myRunnable);
		t.start();

		exchange.getResponseHeaders()
				.add("Access-Control-Allow-Origin", "*");

		if (exchange.getRequestMethod()
				.equalsIgnoreCase("OPTIONS")) {
			exchange.getResponseHeaders().add(
					"Access-Control-Allow-Methods",
					"GET, OPTIONS");
			exchange.getResponseHeaders().add(
					"Access-Control-Allow-Headers",
					"Content-Type,Authorization");
			exchange.sendResponseHeaders(204, -1);
			return;
		}

		String response = "Hi there!";
		exchange.sendResponseHeaders(200,
				response.getBytes().length);// response code
											// and length
		OutputStream os = exchange.getResponseBody();
		os.write(response.getBytes());
		os.flush();
		os.close();

	}

	public String getScenario() {

		return scenario;
	}

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1637155267957</Id>
			<Name><![CDATA[MyRunnable1]]></Name>
			<Text><![CDATA[import org.json.simple.JSONObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonProperty; 
import com.fasterxml.jackson.databind.JsonMappingException;
import java.io.IOException;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;    
import com.fasterxml.jackson.core.JsonParseException;
import java.io.*;

public class MyRunnable1 implements Runnable {
    private Engine simulationRun;
    private String scenario;

    public MyRunnable1(Engine simulationRun, String scenario) {
        this.simulationRun = simulationRun;
        this.scenario = scenario;
    }

    public void run() { // code in the other thread, can reference "var" variable
        Main root = new Main(simulationRun, null, null);
        ObjectMapper om = new ObjectMapper();
        Scenario scenarioRun = new Scenario();

        try {
            scenarioRun = om.readValue(new File(scenario), Scenario.class);

            // scenario = om.readValue(initScenario, Scenario.class);
            traceln(scenarioRun.getDuration().getStartDate());
            
            
            
            
            Engine engine = simulationRun;
    		engine.setTimeUnit( HOUR );
    		// Fixed seed (reproducible simulation runs)
    		engine.getDefaultRandomGenerator().setSeed( 1 );

    		engine.setStartDate(scenarioRun.getDuration().getStartDate() );
    		// Set stop time:
    		engine.setStopDate(scenarioRun.getDuration().getEndDate());
    		// Create new root object:
    		Main root2 = new Main( engine, null, null );
    		// TODO Setup parameters of root object here
    		root.setParametersToDefaultValues();
    		
  
    		
    		root2.initScenario = scenario;
    		// root.precipitation = 123;
    		// ...
    		// Prepare Engine for simulation:
    		 DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
    		   LocalDateTime now = LocalDateTime.now();  
       		traceln( dtf.format(now ));

    		engine.start( root2 );
    		// Start simulation in fast mode:
    		engine.runFast();
    		// TODO Process results of simulation here
    		traceln( "operatingSiteAgents:" );
    		traceln( inspectOf( root2.operatingSiteAgents ) );
    		// ...
    		// Destroy the model:
    		engine.stop();
    		 now = LocalDateTime.now();  
        		traceln( dtf.format(now ));

            
            /* ALT
            
            simulationRun.getExperiment().getEngine().setStartDate(scenarioRun.getDuration().getStartDate());
            simulationRun.getExperiment().getEngine().setStopDate(scenarioRun.getDuration().getEndDate());
            simulationRun.setStartDate(scenarioRun.getDuration().getStartDate());
            simulationRun.setStopDate(scenarioRun.getDuration().getEndDate());
            root.initScenario = scenario;
            simulationRun.start(root); // Start simulation in fast mode:
            simulationRun.runFast();
            */
        } catch (JsonParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (JsonMappingException e) { // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1641375914022</Id>
			<Name><![CDATA[Population]]></Name>
			<Text><![CDATA[import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({"id", "name", "number", "region",
		"fitnessDistribution",
		"friendsDistribution", "helpTimeDistribution",
		"helpDurationDistribution",
		"restingDurationDistribution",
		"acceptableRejectsDayDistribution",
		"acceptableRejectsGeneralDistribution"})
@Generated("jsonschema2pojo")
public class Population {

	/**
	 * Population id
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("id")
	private Integer id = 0;
	/**
	 * Population name
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("name")
	private String name = "City center";
	/**
	 * Population size
	 * <p>
	 * The population size desribes the number of potential
	 * spontaneous volunteers in a certain area. It does not
	 * represent the whole population! (Required)
	 * 
	 */
	@JsonProperty("number")
	@JsonPropertyDescription("The population size desribes the number of potential spontaneous volunteers in a certain area. It does not represent the whole population!")
	private Integer number = 2000;
	/**
	 * GeoJSON Polygon
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("region")
	private GeoPolygon region;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */

	/**
	 * Individual fitness distribution
	 * <p>
	 * The percentage of people that are physically able to
	 * fulfill certain tasks. (Required)
	 * 
	 */
	@JsonProperty("fitnessDistribution")
	@JsonPropertyDescription("The percentage of people that are physically able to fulfill certain tasks.")
	private FitnessDistribution fitnessDistribution;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("friendsDistribution")
	@JsonPropertyDescription("Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum")
	private Distribution friendsDistribution;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("helpTimeDistribution")
	@JsonPropertyDescription("Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum")
	private Distribution helpTimeDistribution;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("helpDurationDistribution")
	@JsonPropertyDescription("Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum")
	private Distribution helpDurationDistribution;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("restingDurationDistribution")
	@JsonPropertyDescription("Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum")
	private Distribution restingDurationDistribution;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("acceptableRejectsDayDistribution")
	@JsonPropertyDescription("Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum")
	private Distribution acceptableRejectsDayDistribution;
	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("acceptableRejectsGeneralDistribution")
	@JsonPropertyDescription("Represents a triangular distribution of certain values whereas min = minimum, mod = mode, max = maximum")
	private Distribution acceptableRejectsGeneralDistribution;

	/**
	 * No args constructor for use in serialization
	 * 
	 */
	public Population() {
	}

	/**
	 * 
	 * @param helpDurationDistribution
	 * @param acceptableRejectsGeneralDistribution
	 * @param fitnessDistribution
	 * @param restingDurationDistribution
	 * @param acceptableRejectsDayDistribution
	 * @param number
	 * @param helpTimeDistribution
	 * @param friendsDistribution
	 * @param name
	 * @param id
	 * @param region
	 */
	public Population(Integer id, String name,
			Integer number, GeoPolygon region,
			FitnessDistribution fitnessDistribution,
			Distribution friendsDistribution,
			Distribution helpTimeDistribution,
			Distribution helpDurationDistribution,
			Distribution restingDurationDistribution,
			Distribution acceptableRejectsDayDistribution,
			Distribution acceptableRejectsGeneralDistribution) {
		super();
		this.id = id;
		this.name = name;
		this.number = number;
		this.region = region;

		this.fitnessDistribution = fitnessDistribution;
		this.friendsDistribution = friendsDistribution;
		this.helpTimeDistribution = helpTimeDistribution;
		this.helpDurationDistribution = helpDurationDistribution;
		this.restingDurationDistribution = restingDurationDistribution;
		this.acceptableRejectsDayDistribution = acceptableRejectsDayDistribution;
		this.acceptableRejectsGeneralDistribution = acceptableRejectsGeneralDistribution;
	}

	/**
	 * Population id
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("id")
	public Integer getId() {
		return id;
	}

	/**
	 * Population id
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("id")
	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * Population name
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("name")
	public String getName() {
		return name;
	}

	/**
	 * Population name
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("name")
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Population size
	 * <p>
	 * The population size desribes the number of potential
	 * spontaneous volunteers in a certain area. It does not
	 * represent the whole population! (Required)
	 * 
	 */
	@JsonProperty("number")
	public Integer getNumber() {
		return number;
	}

	/**
	 * Population size
	 * <p>
	 * The population size desribes the number of potential
	 * spontaneous volunteers in a certain area. It does not
	 * represent the whole population! (Required)
	 * 
	 */
	@JsonProperty("number")
	public void setNumber(Integer number) {
		this.number = number;
	}

	/**
	 * GeoJSON Polygon
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("region")
	public GeoPolygon getRegion() {
		return region;
	}

	/**
	 * GeoJSON Polygon
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("region")
	public void setRegion(GeoPolygon region) {
		this.region = region;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	
	/**
	 * Individual fitness distribution
	 * <p>
	 * The percentage of people that are physically able to
	 * fulfill certain tasks. (Required)
	 * 
	 */
	@JsonProperty("fitnessDistribution")
	public FitnessDistribution getFitnessDistribution() {
		return fitnessDistribution;
	}

	/**
	 * Individual fitness distribution
	 * <p>
	 * The percentage of people that are physically able to
	 * fulfill certain tasks. (Required)
	 * 
	 */
	@JsonProperty("fitnessDistribution")
	public void setFitnessDistribution(
			FitnessDistribution fitnessDistribution) {
		this.fitnessDistribution = fitnessDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("friendsDistribution")
	public Distribution getFriendsDistribution() {
		return friendsDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("friendsDistribution")
	public void setFriendsDistribution(
			Distribution friendsDistribution) {
		this.friendsDistribution = friendsDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("helpTimeDistribution")
	public Distribution getHelpTimeDistribution() {
		return helpTimeDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("helpTimeDistribution")
	public void setHelpTimeDistribution(
			Distribution helpTimeDistribution) {
		this.helpTimeDistribution = helpTimeDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("helpDurationDistribution")
	public Distribution getHelpDurationDistribution() {
		return helpDurationDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("helpDurationDistribution")
	public void setHelpDurationDistribution(
			Distribution helpDurationDistribution) {
		this.helpDurationDistribution = helpDurationDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("restingDurationDistribution")
	public Distribution getRestingDurationDistribution() {
		return restingDurationDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("restingDurationDistribution")
	public void setRestingDurationDistribution(
			Distribution restingDurationDistribution) {
		this.restingDurationDistribution = restingDurationDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("acceptableRejectsDayDistribution")
	public Distribution getAcceptableRejectsDayDistribution() {
		return acceptableRejectsDayDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("acceptableRejectsDayDistribution")
	public void setAcceptableRejectsDayDistribution(
			Distribution acceptableRejectsDayDistribution) {
		this.acceptableRejectsDayDistribution = acceptableRejectsDayDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("acceptableRejectsGeneralDistribution")
	public Distribution getAcceptableRejectsGeneralDistribution() {
		return acceptableRejectsGeneralDistribution;
	}

	/**
	 * Represents a triangular distribution of certain
	 * values whereas min = minimum, mod = mode, max =
	 * maximum (Required)
	 * 
	 */
	@JsonProperty("acceptableRejectsGeneralDistribution")
	public void setAcceptableRejectsGeneralDistribution(
			Distribution acceptableRejectsGeneralDistribution) {
		this.acceptableRejectsGeneralDistribution = acceptableRejectsGeneralDistribution;
	}

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1641376503723</Id>
			<Name><![CDATA[DatabaseConnection]]></Name>
			<Text><![CDATA[/**
 * DatabaseConnection
 */
 import java.sql.*;

 import java.sql.Connection;
 import java.sql.DriverManager;
 
 import java.net.URI;
 
 public class DatabaseConnection implements Serializable {
     private Connection c = null;
     /**
      * Default constructor
      */
     public DatabaseConnection() {
 
         java.sql.Statement stmt = null;
         try {
           //  URI dbUri = new URI("postgres://xuyfcnqqzsuogb:3d706ca5bd23a6f992495465506275030bbbcbbf1744ae9448fc384e4d3b6252@ec2-54-74-60-70.eu-west-1.compute.amazonaws.com:5432/d8gtv4apfirm2j");
              URI dbUri = new URI("postgres://sebastianlindner@localhost:5432/sebastianlindner");
        	 
              /*

             String username = dbUri.getUserInfo()
                     .split(":")[0];
             String password = dbUri.getUserInfo()
                     .split(":")[1];
             
             */
             
             /*
             String dbUrl = "jdbc:postgresql://"
                     + dbUri.getHost() + ':'
                     + dbUri.getPort() + dbUri.getPath()
                     + "?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory";
             System.out.println(dbUrl);
*/             

             String dbUrl = "jdbc:postgresql://"
                     + dbUri.getHost() + ':'
                     + dbUri.getPort() + dbUri.getPath();
             System.out.println(dbUrl);
             
 
             Class.forName("org.postgresql.Driver");
             c = DriverManager.getConnection(dbUrl, "sebastianlindner","");
 
             stmt = c.createStatement();
 
             //String dropTable = "DROP TABLE IF EXISTS operating_site_history, spontaneous_volunteers, experiment";
//            stmt.execute(dropTable);
             stmt.execute(
                     "create extension if not exists postgis");
 
             //String sql = "CREATE TABLE IF NOT EXISTS experiment (id int GENERATED ALWAYS AS IDENTITY, timestamp double precision, title varchar, description varchar)";
             String sql = "CREATE TABLE IF NOT EXISTS experiment (id int, timestamp double precision, title varchar, description varchar)";

             stmt.executeUpdate(sql);
             
              sql = "CREATE TABLE IF NOT EXISTS operating_site_history (timestamp double precision, experiment_id int, name varchar, precipitation int, temperature int, location geography, impact int, media int, threat int, information int, required_admin int, required_easy int, required_medium int, required_heavy int, current_admin int, current_easy int, current_medium int, current_heavy int, current_rejects int )";
             stmt.executeUpdate(sql);
             sql = "CREATE TABLE IF NOT EXISTS spontaneous_volunteers (timestamp double precision,experiment_id int, id int, networkSize int, fitness int, totalDaysWorked int, totalHoursHelped int, totalNumberOfRejects int, home_location geography, isGoingHome boolean, current_location geography, os_destination varchar )";
             stmt.executeUpdate(sql);
             // INSTALL POSTGIS
 
             stmt.close();
 
         } catch (Exception e) {
             e.printStackTrace();
             System.err.println(e.getClass().getName() + ": "
                     + e.getMessage());
             System.exit(0);
         }
         System.out.println("Opened database successfully");
     }
     
   
   public int createNewExperiment(String values) {
    	 
         java.sql.Statement stmt = null;
         try {
 
             stmt = c.createStatement();
 
             String sql = "INSERT INTO experiment (id, timestamp, title, description) VALUES ((SELECT COUNT(id) FROM experiment) "
                     + values;
             stmt.executeUpdate(sql);
             
             

             stmt = c.createStatement();
 
              sql = "SELECT MAX(id) as id FROM experiment LIMIT 1";
     
             java.sql.ResultSet rs = stmt.executeQuery(sql);

             int result = 0;
                while(rs.next()) {
                   System.out.print("ID: "+rs.getInt("id"));
            
                   result=  rs.getInt("id");
                
                }    
                stmt.close();
                return result;
             
 
        
 
         } catch (Exception e) {
             e.printStackTrace();
             System.err.println(e.getClass().getName() + ": "
                     + e.getMessage());
             System.exit(0);
         }
         return 0;

     }
 
     public void insertOperatingSite(String values) {
 
         java.sql.Statement stmt = null;
         try {
 
             stmt = c.createStatement();
 
             String sql = "INSERT INTO operating_site_history (timestamp,experiment_id, name, precipitation, temperature, location, impact, media, threat, information, required_admin, required_easy, required_medium, required_heavy, current_admin, current_easy, current_medium, current_heavy, current_rejects) VALUES "
                     + values;
             stmt.executeUpdate(sql);
 
             stmt.close();
 
         } catch (Exception e) {
             e.printStackTrace();
             System.err.println(e.getClass().getName() + ": "
                     + e.getMessage());
             System.exit(0);
         }
 
     }
     
     
     
     
     /*
      * public void insertOperatingSite(long timestamp, int
      * precipitation, int temperature, int reqAdmin, int
      * currAdmin, int reqEasy, int currEasy, int reqMedium,
      * int currMedium, int reqHeavy, int currHeavy, double
      * latitude, double longitude, int impact, int
      * information, int threat, int media, int currRejects,
      * String name) {
      * 
      * java.sql.Statement stmt = null; try {
      * 
      * 
      * stmt = c.createStatement();
      * 
      * 
      * 
      * String sql =
      * "INSERT INTO operating_site_history (timestamp, name, precipitation, temperature, latitude, longitude, impact, media, threat, information, required_admin, required_easy, required_medium, required_heavy, current_admin, current_easy, current_medium, current_heavy, current_rejects) VALUES ("
      * +timestamp+","+name + ","+precipitation+
      * ","+temperature+ ","+latitude+ ","+longitude+
      * ","+impact+ ","+media+
      * ","+threat+","+information+","+reqAdmin+","+reqEasy+
      * ","+reqMedium+","+reqHeavy+","+currAdmin+","+currEasy
      * +","+currMedium+ ","+currHeavy+","+currRejects+ ")";
      * stmt.executeUpdate(sql);
      * 
      * stmt.close();
      * 
      * 
      * 
      * } catch (Exception e) { e.printStackTrace();
      * System.err.println(e.getClass().getName()+": "+e.
      * getMessage()); System.exit(0); }
      * 
      * 
      * }
      */
     /*
      * public void insertSpontaneousVolunteer(long
      * timestamp, int id, int sex, int age, double empathy,
      * int fitness, int networkSize, int totalDaysWorked,
      * int totalHoursHelped, int numberRejects, double
      * home_lat, double home_lon, double lat, double lon,
      * boolean isGoingHome,String os_dest) {
      * 
      * java.sql.Statement stmt = null; try {
      * 
      * 
      * stmt = c.createStatement();
      * 
      * 
      * 
      * String sql =
      * "INSERT INTO spontaneous_volunteers (timestamp, id, sex, age, empathy, networkSize, fitness, totalDaysWorked, totalHoursHelped, totalNumberOfRejects, home_latitude, home_longitude, isGoingHome, latitude, longitude, os_destination) VAUES ("
      * +timestamp+","+id + ","+sex+ ","+age+ ","+empathy+
      * ","+networkSize+ ","+fitness+ ","+totalDaysWorked+
      * ","+totalHoursHelped+","+numberRejects+","+home_lat+
      * ","+home_lon+","+isGoingHome+","+lat+","+lon+","+
      * os_dest+ ")"; stmt.executeUpdate(sql);
      * 
      * stmt.close();
      * 
      * 
      * 
      * } catch (Exception e) { e.printStackTrace();
      * System.err.println(e.getClass().getName()+": "+e.
      * getMessage()); System.exit(0); }
      * 
      * 
      * }
      * 
      */
     public void insertSpontaneousVolunteer(String values) {
 
         java.sql.Statement stmt = null;
         try {
 
             stmt = c.createStatement();
 
             String sql = "INSERT INTO spontaneous_volunteers (timestamp,experiment_id, id, networkSize, fitness, totalDaysWorked, totalHoursHelped, totalNumberOfRejects, home_location, isGoingHome, current_location, os_destination) VALUES "
                     + values;
             stmt.executeUpdate(sql);
 
             stmt.close();
 
         } catch (Exception e) {
             e.printStackTrace();
             System.err.println(e.getClass().getName() + ": "
                     + e.getMessage());
             System.exit(0);
         }
 
     }
     public void closeConnection() {
         try {
             this.c.close();
 
         } catch (Exception e) {
             e.printStackTrace();
             System.err.println(e.getClass().getName() + ": "
                     + e.getMessage());
             System.exit(0);
         }
     }
 
     @Override
     public String toString() {
         return super.toString();
     }
 
     /**
      * This number is here for model snapshot storing
      * purpose<br>
      * It needs to be changed when this class gets changed
      */
     private static final long serialVersionUID = 1L;
 
 }]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1641377152223</Id>
			<Name><![CDATA[Scenario]]></Name>
			<Text><![CDATA[
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * DSS2Save Scenario Editor
 * <p>
 * Edit the scenario that you want to simulate in DSS2SaVe
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({"id", "title", "description", "duration", "disasterType",
		 "populations", "events"})
@Generated("jsonschema2pojo")
public class Scenario {

	/**
	 * Unique identifier for the scenario
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("id")
	private String id;
	/**
	 * Scenario title
	 * <p>
	 * The scenario title will be used to easily remember a
	 * certain scenario (Required)
	 * 
	 */
	@JsonProperty("title")
	@JsonPropertyDescription("The scenario title will be used to easily remember a certain scenario")
	private String title = "2021 Century of the flood";
	/**
	 * A short decription of your scenario
	 * <p>
	 * Describe the scenario to enable third parties to
	 * understand it (Required)
	 * 
	 */
	@JsonProperty("description")
	@JsonPropertyDescription("Describe the scenario to enable third parties to understand it")
	private String description = "This scenario happens in the City of Halle (Saale). 2,000 volunteers arrive at 8 operating sites within 3 days";
	/**
	 * Location of the disaster
	 * <p>
	 * Name the location of the disaster (Required)
	 * 
	 */

	@JsonProperty("duration")
	@JsonPropertyDescription("Describes the start and end of the disaster")
	private Duration duration;
	/**
	 * Disaster type
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("disasterType")
	private Scenario.DisasterType disasterType = Scenario.DisasterType
			.fromValue("flood");
	/**
	 * GeoJSON Polygon
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	
	/**
	 * Spontaneous Volunteer Populations
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("populations")
	private List<Population> populations = null;
	/**
	 * Events in the scenario
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("events")
	private List<ScenarioEvent> events = null;

	/**
	 * No args constructor for use in serialization
	 * 
	 */
	public Scenario() {
	}

	/**
	 * 
	 * @param duration
	 * @param disasterType
	 * @param description
	 * @param id
	 * @param title
	 * @param populations
	 * @param events
	 */
	public Scenario(String id, String title,
			String description, 
			Duration duration,
			Scenario.DisasterType disasterType,
			List<Population> populations,
			List<ScenarioEvent> events) {
		super();
		this.id = id;
		this.title = title;
		this.description = description;
		this.duration = duration;
		this.disasterType = disasterType;
		this.populations = populations;
		this.events = events;
	}

	/**
	 * Unique identifier for the scenario
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("id")
	public String getId() {
		return id;
	}

	/**
	 * Unique identifier for the scenario
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("id")
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * Scenario title
	 * <p>
	 * The scenario title will be used to easily remember a
	 * certain scenario (Required)
	 * 
	 */
	@JsonProperty("title")
	public String getTitle() {
		return title;
	}

	/**
	 * Scenario title
	 * <p>
	 * The scenario title will be used to easily remember a
	 * certain scenario (Required)
	 * 
	 */
	@JsonProperty("title")
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * A short decription of your scenario
	 * <p>
	 * Describe the scenario to enable third parties to
	 * understand it (Required)
	 * 
	 */
	@JsonProperty("description")
	public String getDescription() {
		return description;
	}

	/**
	 * A short decription of your scenario
	 * <p>
	 * Describe the scenario to enable third parties to
	 * understand it (Required)
	 * 
	 */
	@JsonProperty("description")
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Location of the disaster
	 * <p>
	 * Name the location of the disaster (Required)
	 * 
	 */

	/**
	 * Location of the disaster
	 * <p>
	 * Name the location of the disaster (Required)
	 * 
	 */


	/**
	 * The duration of the disaster
	 * <p>
	 * Describes the start and end of the disaster
	 * (Required)
	 * 
	 */
	@JsonProperty("duration")
	public Duration getDuration() {
		return duration;
	}

	/**
	 * The duration of the disaster
	 * <p>
	 * Describes the start and end of the disaster
	 * (Required)
	 * 
	 */
	@JsonProperty("duration")
	public void setDuration(Duration duration) {
		this.duration = duration;
	}

	/**
	 * Disaster type
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("disasterType")
	public Scenario.DisasterType getDisasterType() {
		return disasterType;
	}

	/**
	 * Disaster type
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("disasterType")
	public void setDisasterType(
			Scenario.DisasterType disasterType) {
		this.disasterType = disasterType;
	}

	/**
	 * GeoJSON Polygon
	 * <p>
	 * 
	 * (Required)
	 * 
	 */


	/**
	 * GeoJSON Polygon
	 * <p>
	 * 
	 * (Required)
	 * 
	 */


	/**
	 * Spontaneous Volunteer Populations
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("populations")
	public List<Population> getPopulations() {
		return populations;
	}

	/**
	 * Spontaneous Volunteer Populations
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("populations")
	public void setPopulations(
			List<Population> populations) {
		this.populations = populations;
	}

	/**
	 * Events in the scenario
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("events")
	public List<ScenarioEvent> getEvents() {
		return events;
	}

	/**
	 * Events in the scenario
	 * <p>
	 * 
	 * (Required)
	 * 
	 */
	@JsonProperty("events")
	public void setEvents(List<ScenarioEvent> events) {
		this.events = events;
	}

	/**
	 * Disaster type
	 * <p>
	 * 
	 * 
	 */
	@Generated("jsonschema2pojo")
	public enum DisasterType {

		FLOOD("flood");
		private final String value;
		private final static Map<String, Scenario.DisasterType> CONSTANTS = new HashMap<String, Scenario.DisasterType>();

		static {
			for (Scenario.DisasterType c : values()) {
				CONSTANTS.put(c.value, c);
			}
		}

		DisasterType(String value) {
			this.value = value;
		}

		@Override
		public String toString() {
			return this.value;
		}

		@JsonValue
		public String value() {
			return this.value;
		}

		@JsonCreator
		public static Scenario.DisasterType fromValue(
				String value) {
			Scenario.DisasterType constant = CONSTANTS
					.get(value);
			if (constant == null) {
				throw new IllegalArgumentException(value);
			} else {
				return constant;
			}
		}

	}

}
]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1641398948749</Id>
			<Name><![CDATA[OSScore]]></Name>
			<Text><![CDATA[/**
 * OSScore
 */	
public class OSScore {
	private OperatingSiteAgent operatingSite;
	private double score;

    /**
     * Default constructor
     */
    public OSScore(double score, OperatingSiteAgent operatingSite) {
    	 this.score = score;
    	  this.operatingSite = operatingSite;
    }



    	public double getScore(){
    	  return this.score; 
    	} 
    
  
     	public OperatingSiteAgent getOperatingSite(){
     	  return this.operatingSite; 
     	} 
     
    
}]]></Text>
		</JavaClass>
	</JavaClasses>
	<ModelResources>
		<Resource>
			<Path><![CDATA[sachsen-anhalt-latest.osm.pbf]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/nodes_ch_fastest_foot]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/shortcuts_shortest_foot]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/names]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/nodes]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/properties]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/shortcuts_fastest_foot]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/nodes_ch_shortest_foot]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/geometry]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/tmp_pillar_info]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/gh.lock]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/edges]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Routing Path/location_index]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[mojo2-runtime.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[json-simple-1.1.1.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[json-20210307-javadoc.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[jackson-annotations-2.13.0-rc2.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[jackson-databind-2.13.0-rc2.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[jackson-core-2.13.0-rc2.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[commons-lang3-3.12.0.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[postgresql-42.2.24.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[ojdbc7.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[joda-time-2.10.12.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[pipeline.mojo]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[socket.io-server-3.0.2.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[engine.io-server-5.0.1.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[Pypeline.jar]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[predictor.py]]></Path>
			<ReferencedFromUserCode>true</ReferencedFromUserCode>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.processmodeling]]></LibraryName>
		<VersionMajor>8</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>5</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.pypeline]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>6</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[mojo2-runtime.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[json-simple-1.1.1.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[json-20210307-javadoc.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[jackson-annotations-2.13.0-rc2.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[jackson-databind-2.13.0-rc2.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[jackson-core-2.13.0-rc2.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[commons-lang3-3.12.0.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[postgresql-42.2.24.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[ojdbc7.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[joda-time-2.10.12.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[mojo2-runtime.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[socket.io-server-3.0.2.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<ResourceReference>
			<PackageName><![CDATA[dss2save]]></PackageName>
			<ClassName><![CDATA[engine.io-server-5.0.1.jar]]></ClassName>
		</ResourceReference>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
</Model>
</AnyLogicWorkspace>